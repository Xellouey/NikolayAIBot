import asyncio
import config
import json
import logging
import utils
import keyboards as kb
from datetime import datetime as dt, timedelta
from aiogram import types, Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import FSMMail
from database import mail
from mail import mailing


logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
    # filename='file.log'
)

router = Router()
bot = Bot(config.TOKEN)
m = mail.Mail()


@router.callback_query(F.data == 'mail')
async def mailingFirstLine(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMMail.date_mail)
    
    await call.message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', reply_markup=kb.markup_pass())
    await call.answer()
    
    
@router.message(FSMMail.date_mail)
async def takeMailDatetime(message: types.Message, state: FSMMail):
    if message.text == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ - –≤—Ä–µ–º—è –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –≤ –ø—Ä–æ—à–ª–æ–º
        date_mail = dt.now() - timedelta(seconds=10)
        logging.info(f"üöÄ Immediate send scheduled for {date_mail.strftime('%d.%m.%Y %H:%M:%S')}")
    else:
        try:
            date_mail = dt.strptime(message.text, '%d.%m.%Y %H:%M')
            logging.info(f"üìÖ Scheduled send for {date_mail.strftime('%d.%m.%Y %H:%M:%S')}")
        except:
            await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', reply_markup=kb.markup_pass())
            return 
        
    await state.update_data(date_mail=date_mail)
    await state.set_state(FSMMail.message)
    
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=kb.markup_cancel())

    
@router.message(FSMMail.message)
async def takeMailMessage(message: types.Message, state: FSMMail):
    message_id = message.message_id
    from_id = message.from_user.id
    
    await state.update_data(message_id=message_id, from_id=from_id)
    await state.set_state(FSMMail.keyboard)
    
    # Send help message with JSON example and copy button
    help_text = utils.get_text('mail.messages.mail_help')
    keyboard_items = [
        [types.InlineKeyboardButton(text=utils.get_text('mail.buttons.copy_json'), callback_data='copy_json_example')],
        [types.KeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), types.KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    
    inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text=utils.get_text('mail.buttons.copy_json'), callback_data='copy_json_example')]])
    reply_kb = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), types.KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    
    await message.answer(help_text, reply_markup=inline_kb)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=reply_kb)


@router.callback_query(F.data == 'copy_json_example')
async def copy_json_example(call: types.CallbackQuery):
    """Send JSON example for easy copying"""
    await call.answer()
    
    example_json = utils.get_text('mail.messages.json_example')
    await call.message.answer(
        f'üìã <b>–ü—Ä–∏–º–µ—Ä JSON –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n<code>{example_json}</code>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
    )
  
    
@router.message(FSMMail.keyboard)
async def takeMailkeyboard(message: types.Message, state: FSMMail):    
    if message.text.lower() == '‚û°Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        keyboard = None
    else:
        keyboard = message.text

        try:
            keyboard = json.loads(keyboard)
        except:
            # Show error with copy button again
            inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text=utils.get_text('mail.buttons.copy_json'), callback_data='copy_json_example')]])
            await message.answer(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
                reply_markup=inline_kb
            )
            return

    await state.update_data(keyboard=keyboard)
    await state.set_state(FSMMail.confirm)
    
    stateData = await state.get_data()
    message_id = stateData['message_id']
    from_id = stateData['from_id']
    
    await bot.copy_message(message.from_user.id, from_id, message_id, reply_markup=kb.markup_custom(keyboard))
    await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
    
    
@router.message(FSMMail.confirm)
async def takeMailConfirm(message: types.Message, state: FSMContext):
    try:
        if message.text.lower() != '‚úÖ –¥–∞':
            await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
            return
    except:
        await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
        return

    stateData = await state.get_data()
    date_mail = stateData['date_mail']
    message_id = stateData['message_id']
    from_id = stateData['from_id']
    keyboard = stateData['keyboard']
    await state.clear()

    date_mail_str = date_mail.strftime('%d.%m.%Y %H:%M')

    await m.create_mail(date_mail, message_id, from_id, keyboard)
    
    if date_mail < dt.now():
        await mailing(message_id, from_id, keyboard)
        await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ', reply_markup=kb.markup_remove())
    else:
        await message.answer(f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ {date_mail_str}', reply_markup=kb.markup_remove())
