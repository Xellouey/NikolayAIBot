import asyncio
import config
import json
import logging
import utils
import keyboards as kb
from datetime import datetime as dt, timedelta
from aiogram import types, Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import FSMMail
from database import mail
from mail import mailing
from localization import get_text


logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
    # filename='file.log'
)

router = Router()
bot = Bot(config.TOKEN)
m = mail.Mail()


@router.callback_query(F.data == 'mail')
async def mailingFirstLine(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMMail.date_mail)
    
    await call.message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', reply_markup=kb.markup_pass())
    await call.answer()
    
    
@router.message(FSMMail.date_mail)
async def takeMailDatetime(message: types.Message, state: FSMMail):
    if message.text == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ - –≤—Ä–µ–º—è –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –≤ –ø—Ä–æ—à–ª–æ–º
        date_mail = dt.now() - timedelta(seconds=10)
        logging.info(f"üöÄ Immediate send scheduled for {date_mail.strftime('%d.%m.%Y %H:%M:%S')}")
    else:
        try:
            date_mail = dt.strptime(message.text, '%d.%m.%Y %H:%M')
            logging.info(f"üìÖ Scheduled send for {date_mail.strftime('%d.%m.%Y %H:%M:%S')}")
        except:
            await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', reply_markup=kb.markup_pass())
            return 
        
    await state.update_data(date_mail=date_mail)
    await state.set_state(FSMMail.media)
    
    await message.answer('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', reply_markup=kb.markup_pass())

    
@router.message(FSMMail.media)
async def takeMailMedia(message: types.Message, state: FSMMail):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫"""
    media = None
    media_type = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏–π
    if message.photo:
        media = message.photo[-1].file_id  # –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        media_type = 'photo'
    elif message.video:
        media = message.video.file_id
        media_type = 'video'
    elif message.text and message.text.lower() == '‚û°Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        media = None
        media_type = None
    else:
        await message.answer('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', reply_markup=kb.markup_pass())
        return

    await state.update_data(media=media, media_type=media_type)
    await state.set_state(FSMMail.message)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=kb.markup_cancel())


@router.message(FSMMail.message)
async def takeMailMessage(message: types.Message, state: FSMMail):
    message_id = message.message_id
    from_id = message.from_user.id
    
    await state.update_data(message_id=message_id, from_id=from_id)
    await state.set_state(FSMMail.keyboard)
    
    # Send help message with JSON example and copy button
    help_text = get_text('mail.messages.mail_help')
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ JSON
    inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=get_text('mail.buttons.copy_inline'), callback_data='copy_json_inline')],
        [types.InlineKeyboardButton(text=get_text('mail.buttons.copy_callback'), callback_data='copy_json_callback')]
    ])
    reply_kb = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), types.KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    
    await message.answer(help_text, reply_markup=inline_kb)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=reply_kb)


@router.callback_query(F.data == 'copy_json_inline')
async def copy_json_inline(call: types.CallbackQuery):
    """Send INLINE JSON example for easy copying"""
    await call.answer()
    example_json = get_text('mail.messages.json_example_inline')
    await call.message.answer(
        f'üìã <b>Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (JSON):</b>\n\n<code>{example_json}</code>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
    )

@router.callback_query(F.data == 'copy_json_callback')
async def copy_json_callback(call: types.CallbackQuery):
    """Send callback buttons JSON example for easy copying"""
    await call.answer()
    example_json = get_text('mail.messages.json_example_callback')
    await call.message.answer(
        f'üîò <b>Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å callback (JSON):</b>\n\n<code>{example_json}</code>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
    )
  
    
@router.message(FSMMail.keyboard)
async def takeMailkeyboard(message: types.Message, state: FSMMail):    
    if message.text.lower() == '‚û°Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        keyboard = None
    else:
        text = message.text.strip()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª 2 –±–ª–æ–∫–∞ JSON –ø–æ–¥—Ä—è–¥,
        # –≤—ã—Ç–∞—â–∏–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        keyboard = None
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: —Ü–µ–ª–∏–∫–æ–º –∫–∞–∫ JSON
            keyboard = json.loads(text)
        except Exception:
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            candidates = re.findall(r"\{[\s\S]*?\}", text)
            for c in candidates:
                try:
                    keyboard = json.loads(c)
                    break
                except Exception:
                    continue
        if keyboard is None:
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–Ω–æ–≤–∞
            inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=get_text('mail.buttons.copy_inline'), callback_data='copy_json_inline')],
                [types.InlineKeyboardButton(text=get_text('mail.buttons.copy_callback'), callback_data='copy_json_callback')]
            ])
            await message.answer(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ:',
                reply_markup=inline_kb
            )
            return

    await state.update_data(keyboard=keyboard)
    await state.set_state(FSMMail.confirm)
    
    stateData = await state.get_data()
    message_id = stateData['message_id']
    from_id = stateData['from_id']
    media = stateData.get('media')
    media_type = stateData.get('media_type')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    if media and media_type:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_message = await bot.forward_message(message.from_user.id, from_id, message_id)
        text = text_message.text or text_message.caption or ''
        await text_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        if media_type == 'photo':
            await bot.send_photo(message.from_user.id, media, caption=text, reply_markup=kb.markup_custom(keyboard))
        elif media_type == 'video':
            await bot.send_video(message.from_user.id, media, caption=text, reply_markup=kb.markup_custom(keyboard))
    else:
        # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞
        await bot.copy_message(message.from_user.id, from_id, message_id, reply_markup=kb.markup_custom(keyboard))
    
    await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
    
    
@router.message(FSMMail.confirm)
async def takeMailConfirm(message: types.Message, state: FSMContext):
    try:
        if message.text.lower() != '‚úÖ –¥–∞':
            await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
            return
    except:
        await message.answer('üëâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=kb.markup_confirm())
        return

    stateData = await state.get_data()
    date_mail = stateData['date_mail']
    message_id = stateData['message_id']
    from_id = stateData['from_id']
    keyboard = stateData['keyboard']
    media = stateData.get('media')
    media_type = stateData.get('media_type')
    await state.clear()

    date_mail_str = date_mail.strftime('%d.%m.%Y %H:%M')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    preview_msg = await bot.forward_message(message.from_user.id, from_id, message_id)
    text = preview_msg.text or preview_msg.caption or ''
    await preview_msg.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ —Å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º
    message_info = {"text": text, "media": media, "media_type": media_type}
    await m.create_mail(date_mail, message_id, from_id, keyboard, message_text=message_info)
    
    if date_mail < dt.now():
        await mailing(message_id, from_id, keyboard, message_info=message_info)
        await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ', reply_markup=kb.markup_remove())
    else:
        await message.answer(f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ {date_mail_str}', reply_markup=kb.markup_remove())
