import config
import logging
import utils
from localization import get_text
import keyboards as kb
from datetime import datetime
from aiogram import Bot, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import FSMSupport
from database.support import SupportTicket, TicketMessage
from database.user import User

logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
)

bot = Bot(config.TOKEN)
router = Router()

# Initialize database models
support_ticket = SupportTicket()
ticket_message = TicketMessage()
user_model = User()


# ===== USER SUPPORT HANDLERS =====

@router.callback_query(F.data == 'cancel_support')
async def cancel_support_inline(call: types.CallbackQuery, state: FSMContext):
    """Cancel support operation via inline button"""
    current_state = await state.get_state()
    
    if current_state and 'FSMSupport' in str(current_state):
        await state.clear()
        await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        
        is_admin = call.from_user.id in config.ADMINS or call.from_user.id in utils.get_admins()
        
        if is_admin:
            # Create new callback data for admin_support
            new_call = types.CallbackQuery(
                id=call.id,
                from_user=call.from_user, 
                chat_instance=call.chat_instance,
                data="admin_support",
                message=call.message
            )
            await admin_support_dashboard(new_call, state)
        else:
            # Show support menu
            await call.message.edit_text(
                get_text('messages.support_welcome'),
                reply_markup=kb.markup_support_menu()
            )
    else:
        await call.answer()


@router.callback_query(F.data == 'support')
async def support_menu(call: types.CallbackQuery, state: FSMContext):
    """Show support menu"""
    await state.clear()
    await call.answer()
    
    await call.message.edit_text(
        get_text('messages.support_welcome'),
        reply_markup=kb.markup_support_menu()
    )


@router.callback_query(F.data == 'create_ticket')
async def create_ticket_start(call: types.CallbackQuery, state: FSMContext):
    """Start ticket creation process"""
    await state.set_state(FSMSupport.waiting_subject)
    await call.answer()
    
    # Create inline cancel button
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_support")]
    ])
    
    await call.message.edit_text(
        get_text('messages.ticket_subject_prompt'),
        reply_markup=cancel_keyboard
    )


@router.message(FSMSupport.waiting_subject)
async def process_ticket_subject(message: types.Message, state: FSMContext):
    """Process ticket subject"""
    if not message.text or len(message.text.strip()) < 3:
        await message.answer(
            "‚ùå –¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=kb.markup_cancel()
        )
        return
    
    subject = message.text.strip()[:200]  # Limit subject length
    await state.update_data(subject=subject)
    await state.set_state(FSMSupport.waiting_description)
    
    await message.answer(
        get_text('messages.ticket_description_prompt'),
        reply_markup=kb.markup_cancel()
    )


@router.message(FSMSupport.waiting_description)
async def process_ticket_description(message: types.Message, state: FSMContext):
    """Process ticket description and create ticket"""
    if message.content_type not in ['text', 'photo', 'video', 'document']:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:",
            reply_markup=kb.markup_cancel()
        )
        return
    
    try:
        state_data = await state.get_data()
        subject = state_data['subject']
        
        # Prepare description and media data
        description = ""
        message_type = message.content_type
        file_id = None
        
        if message.content_type == 'text':
            description = message.text.strip()[:4000]  # Limit description length
        elif message.content_type == 'photo':
            description = message.caption or "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            file_id = message.photo[-1].file_id
        elif message.content_type == 'video':
            description = message.caption or "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–∏–¥–µ–æ"
            file_id = message.video.file_id
        elif message.content_type == 'document':
            description = message.caption or f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}"
            file_id = message.document.file_id
        
        if not description or len(description.strip()) < 5:
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.markup_cancel()
            )
            return
        
        # Create ticket
        ticket = await support_ticket.create_ticket(
            user_id=message.from_user.id,
            subject=subject,
            description=description
        )
        
        # Create initial message with description
        await ticket_message.create_message(
            ticket_id=ticket.id,
            sender_id=message.from_user.id,
            sender_type='user',
            message_text=description,
            message_type=message_type,
            file_id=file_id
        )
        
        await state.clear()
        
        # Send confirmation to user
        await message.answer(
            get_text('messages.ticket_created', 
                          ticket_id=ticket.id, 
                          subject=subject),
            reply_markup=kb.markup_remove()
        )
        
        # Send notification to admins
        await notify_admins_new_ticket(ticket, message.from_user)
        
        # Show support menu
        await message.answer(
            get_text('messages.support_welcome'),
            reply_markup=kb.markup_support_menu()
        )
        
    except Exception as e:
        logging.error(f"Error creating ticket: {e}")
        await state.clear()
        await message.answer(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_support_menu()
        )


@router.callback_query(F.data == 'my_tickets')
async def show_user_tickets(call: types.CallbackQuery, state: FSMContext):
    """Show user's tickets"""
    await call.answer()
    
    try:
        tickets = await support_ticket.get_user_tickets(call.from_user.id)
        
        if not tickets:
            await call.message.edit_text(
                get_text('messages.no_tickets'),
                reply_markup=kb.markup_support_menu()
            )
            return
        
        await call.message.edit_text(
            f"üìã **–í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã** ({len(tickets)})\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=kb.markup_user_tickets(tickets)
        )
        
    except Exception as e:
        logging.error(f"Error in show_user_tickets: {e}")
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_support_menu()
        )


@router.callback_query(lambda F: F.data.startswith('view_ticket:'))
async def view_ticket_details(call: types.CallbackQuery, state: FSMContext):
    """View ticket details"""
    await call.answer()
    
    try:
        ticket_id = int(call.data.split(':')[1])
        ticket = await support_ticket.get_ticket(ticket_id)
        
        if not ticket or ticket.user_id != call.from_user.id:
            await call.message.edit_text(
                "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
                reply_markup=kb.markup_support_menu()
            )
            return
        
        # Get status text
        status_text = {
            'open': get_text('messages.ticket_status_open'),
            'in_progress': get_text('messages.ticket_status_in_progress'),
            'closed': get_text('messages.ticket_status_closed')
        }.get(ticket.status, ticket.status)
        
        # Format created_at
        created_at = ticket.created_at.strftime("%d.%m.%Y %H:%M")
        
        text = get_text('messages.ticket_details',
                             ticket_id=ticket.id,
                             subject=ticket.subject,
                             status=status_text,
                             created_at=created_at,
                             description=ticket.description)
        
        await call.message.edit_text(
            text,
            reply_markup=kb.markup_ticket_details(ticket_id, ticket.status == 'closed')
        )
        
    except Exception as e:
        logging.error(f"Error in view_ticket_details: {e}")
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_support_menu()
        )


@router.callback_query(lambda F: F.data.startswith('ticket_conversation:'))
async def show_ticket_conversation(call: types.CallbackQuery, state: FSMContext):
    """Show ticket conversation"""
    await call.answer()
    
    try:
        ticket_id = int(call.data.split(':')[1])
        ticket = await support_ticket.get_ticket(ticket_id)
        
        # Check permissions (user can only see their own tickets, admins can see all)
        is_admin = call.from_user.id in config.ADMINS or call.from_user.id in utils.get_admins()
        if not ticket or (not is_admin and ticket.user_id != call.from_user.id):
            await call.message.edit_text(
                "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
                reply_markup=kb.markup_support_menu() if not is_admin else kb.markup_admin_support_dashboard()
            )
            return
        
        # Get conversation messages
        messages = await ticket_message.get_ticket_messages(ticket_id)
        
        conversation_text = f"üí¨ **–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}**\n"
        conversation_text += f"üìù –¢–µ–º–∞: {ticket.subject}\n\n"
        
        for msg in messages:
            timestamp = msg['created_at'].strftime("%d.%m %H:%M")
            sender_type = "üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**" if msg['sender_type'] == 'admin' else "üë§ **–í—ã**"
            
            if is_admin and msg['sender_type'] == 'user':
                sender_type = "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**"
            
            conversation_text += f"{sender_type} ({timestamp}):\n{msg['message_text']}\n\n"
        
        # Send back button logic
        back_callback = 'admin_support' if is_admin else 'my_tickets'
        back_button = [InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=back_callback
        )]
        
        await call.message.edit_text(
            conversation_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[back_button])
        )
        
    except Exception as e:
        logging.error(f"Error in show_ticket_conversation: {e}")
        back_markup = kb.markup_support_menu()
        if call.from_user.id in config.ADMINS or call.from_user.id in utils.get_admins():
            back_markup = kb.markup_admin_support_dashboard()
        
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=back_markup
        )


# ===== ADMIN SUPPORT HANDLERS =====

@router.callback_query(F.data == 'admin_support')
async def admin_support_dashboard(call: types.CallbackQuery, state: FSMContext):
    """Admin support dashboard"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    
    try:
        # Get ticket counts
        counts = await support_ticket.get_tickets_count_by_status()
        
        text = get_text('admin.messages.support_dashboard',
                             total=counts['total'],
                             open=counts['open'],
                             in_progress=counts['in_progress'],
                             closed=counts['closed'])
        
        try:
            await call.message.edit_text(
                text,
                reply_markup=kb.markup_admin_support_dashboard()
            )
        except Exception as edit_error:
            # If edit fails (message not modified), just answer the callback
            if "message is not modified" in str(edit_error):
                await call.answer("‚úÖ –ü–∞–Ω–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            else:
                raise edit_error
        
    except Exception as e:
        logging.error(f"Error in admin_support_dashboard: {e}")
        try:
            await call.message.edit_text(
                get_text('messages.error_occurred'),
                reply_markup=kb.markup_admin_shop(call.from_user.id)
            )
        except:
            # If even error message can't be edited, just answer the callback
            await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda F: F.data.startswith('tickets_'))
async def show_tickets_by_status(call: types.CallbackQuery, state: FSMContext):
    """Show tickets filtered by status"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    try:
        status = call.data.split('_')[1]  # tickets_open -> open
        tickets = await support_ticket.get_all_tickets(status=status)
        
        # Get status name for display
        status_name = {
            'open': 'üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ',
            'in_progress': 'üü° –í —Ä–∞–±–æ—Ç–µ', 
            'closed': 'üî¥ –ó–∞–∫—Ä—ã—Ç—ã–µ'
        }.get(status, status)
        
        if not tickets:
            # Make text unique for each status to avoid Telegram "message is not modified" error
            no_tickets_text = f"{status_name} —Ç–∏–∫–µ—Ç—ã\n\n‚ùå –¢–∏–∫–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status_name.lower()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
            
            try:
                await call.message.edit_text(
                    no_tickets_text,
                    reply_markup=kb.markup_admin_support_dashboard()
                )
            except Exception as edit_error:
                # If edit fails (message not modified), just answer the callback
                if "message is not modified" in str(edit_error):
                    await call.answer("‚úÖ –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–∏–∫–µ—Ç—ã —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º")
                else:
                    raise edit_error
            return
        
        text = f"{status_name} —Ç–∏–∫–µ—Ç—ã\n\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(tickets)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç:"
        
        try:
            await call.message.edit_text(
                text,
                reply_markup=kb.markup_admin_tickets_list(tickets)
            )
        except Exception as edit_error:
            # If edit fails (message not modified), just answer the callback
            if "message is not modified" in str(edit_error):
                await call.answer("‚úÖ –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–∏–∫–µ—Ç—ã —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º")
            else:
                raise edit_error
        
    except Exception as e:
        logging.error(f"Error in show_tickets_by_status: {e}")
        try:
            await call.message.edit_text(
                get_text('messages.error_occurred'),
                reply_markup=kb.markup_admin_support_dashboard()
            )
        except:
            # If even error message can't be edited, just answer the callback
            await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda F: F.data.startswith('admin_ticket:'))
async def admin_view_ticket(call: types.CallbackQuery, state: FSMContext):
    """Admin view ticket details"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    try:
        ticket_id = int(call.data.split(':')[1])
        ticket = await support_ticket.get_ticket(ticket_id)
        
        if not ticket:
            await call.message.edit_text(
                "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=kb.markup_admin_support_dashboard()
            )
            return
        
        # Get user info
        user_info = await user_model.get_user(ticket.user_id)
        user_name = user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user_info else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # Format timestamps
        created_at = ticket.created_at.strftime("%d.%m.%Y %H:%M")
        updated_at = ticket.updated_at.strftime("%d.%m.%Y %H:%M")
        
        # Status text
        status_text = {
            'open': 'üü¢ –û—Ç–∫—Ä—ã—Ç',
            'in_progress': 'üü° –í —Ä–∞–±–æ—Ç–µ',
            'closed': 'üî¥ –ó–∞–∫—Ä—ã—Ç'
        }.get(ticket.status, ticket.status)
        
        text = get_text('admin.messages.ticket_details_admin',
                             ticket_id=ticket.id,
                             user_name=user_name,
                             user_id=ticket.user_id,
                             subject=ticket.subject,
                             status=status_text,
                             created_at=created_at,
                             updated_at=updated_at,
                             description=ticket.description)
        
        await call.message.edit_text(
            text,
            reply_markup=kb.markup_admin_ticket_actions(ticket_id, ticket.status == 'closed')
        )
        
    except Exception as e:
        logging.error(f"Error in admin_view_ticket: {e}")
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_admin_support_dashboard()
        )


@router.callback_query(lambda F: F.data.startswith('respond_ticket:'))
async def admin_respond_ticket(call: types.CallbackQuery, state: FSMContext):
    """Start admin response to ticket"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    try:
        ticket_id = int(call.data.split(':')[1])
        await state.set_state(FSMSupport.admin_responding)
        await state.update_data(ticket_id=ticket_id)
        
        # Create inline cancel button for admin
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_support")]
        ])
        
        await call.message.edit_text(
            get_text('admin.messages.admin_response_prompt'),
            reply_markup=cancel_keyboard
        )
        
    except Exception as e:
        logging.error(f"Error in admin_respond_ticket: {e}")
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_admin_support_dashboard()
        )


@router.message(FSMSupport.admin_responding)
async def process_admin_response(message: types.Message, state: FSMContext):
    """Process admin response"""
    if message.content_type not in ['text', 'photo', 'video', 'document']:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:",
            reply_markup=kb.markup_cancel()
        )
        return
    
    try:
        state_data = await state.get_data()
        ticket_id = state_data['ticket_id']
        
        # Get ticket info
        ticket = await support_ticket.get_ticket(ticket_id)
        if not ticket:
            await state.clear()
            await message.answer(
                "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=kb.markup_admin_support_dashboard()
            )
            return
        
        # Prepare response data
        response_text = ""
        message_type = message.content_type
        file_id = None
        
        if message.content_type == 'text':
            response_text = message.text.strip()
        elif message.content_type == 'photo':
            response_text = message.caption or "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            file_id = message.photo[-1].file_id
        elif message.content_type == 'video':
            response_text = message.caption or "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–∏–¥–µ–æ"
            file_id = message.video.file_id
        elif message.content_type == 'document':
            response_text = message.caption or f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}"
            file_id = message.document.file_id
        
        # Create admin message
        await ticket_message.create_message(
            ticket_id=ticket_id,
            sender_id=message.from_user.id,
            sender_type='admin',
            message_text=response_text,
            message_type=message_type,
            file_id=file_id
        )
        
        # Update ticket status to in_progress if it was open
        if ticket.status == 'open':
            await support_ticket.update_ticket(ticket_id, status='in_progress')
        
        await state.clear()
        
        # Notify user about response
        await notify_user_response(ticket, message.from_user)
        
        await message.answer(
            get_text('admin.messages.response_sent'),
            reply_markup=kb.markup_remove()
        )
        
        # Return to admin dashboard
        await admin_support_dashboard(call=types.CallbackQuery(
            id="fake",
            from_user=message.from_user,
            chat_instance="fake",
            data="admin_support",
            message=message
        ), state=state)
        
    except Exception as e:
        logging.error(f"Error in process_admin_response: {e}")
        await state.clear()
        await message.answer(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_admin_support_dashboard()
        )


@router.callback_query(lambda F: F.data.startswith('close_ticket:'))
async def admin_close_ticket(call: types.CallbackQuery, state: FSMContext):
    """Close ticket"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    try:
        ticket_id = int(call.data.split(':')[1])
        ticket = await support_ticket.get_ticket(ticket_id)
        
        if not ticket:
            await call.message.edit_text(
                "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=kb.markup_admin_support_dashboard()
            )
            return
        
        # Close ticket
        await support_ticket.close_ticket(ticket_id)
        
        # Notify user
        await notify_user_ticket_closed(ticket, call.from_user)
        
        await call.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!")
        
        # Refresh admin dashboard
        await admin_support_dashboard(call, state)
        
    except Exception as e:
        logging.error(f"Error in admin_close_ticket: {e}")
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_admin_support_dashboard()
        )


@router.callback_query(F.data == 'support_stats')
async def show_support_statistics(call: types.CallbackQuery, state: FSMContext):
    """Show support statistics"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    try:
        # Get statistics
        counts = await support_ticket.get_tickets_count_by_status()
        all_tickets = await support_ticket.get_all_tickets()
        
        # Calculate average response time, tickets per day, etc.
        today_tickets = [t for t in all_tickets if t['created_at'].date() == datetime.now().date()]
        week_tickets = [t for t in all_tickets if (datetime.now() - t['created_at']).days <= 7]
        
        text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
        text += f"üé´ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {counts['total']}\n"
        text += f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {counts['open']}\n"
        text += f"üü° –í —Ä–∞–±–æ—Ç–µ: {counts['in_progress']}\n"
        text += f"üî¥ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {counts['closed']}\n\n"
        text += f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_tickets)}\n"
        text += f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {len(week_tickets)}\n"
        
        await call.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data='admin_support'
                )]
            ])
        )
        
    except Exception as e:
        logging.error(f"Error in show_support_statistics: {e}")
        await call.message.edit_text(
            get_text('messages.error_occurred'),
            reply_markup=kb.markup_admin_support_dashboard()
        )


# ===== NOTIFICATION FUNCTIONS =====

async def notify_admins_new_ticket(ticket, user):
    """Notify admins about new ticket"""
    try:
        admin_ids = list(config.ADMINS) + utils.get_admins()
        
        user_name = user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        created_at = ticket.created_at.strftime("%d.%m.%Y %H:%M")
        
        text = get_text('admin.messages.new_ticket_notification',
                             subject=ticket.subject,
                             user_name=user_name,
                             user_id=ticket.user_id,
                             created_at=created_at)
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, text)
            except Exception as e:
                logging.error(f"Failed to notify admin {admin_id}: {e}")
                
    except Exception as e:
        logging.error(f"Error in notify_admins_new_ticket: {e}")


async def notify_user_response(ticket, admin_user):
    """Notify user about admin response"""
    try:
        text = get_text('messages.ticket_response_notification',
                             ticket_id=ticket.id,
                             subject=ticket.subject)
        
        await bot.send_message(ticket.user_id, text)
        
    except Exception as e:
        logging.error(f"Error in notify_user_response: {e}")


async def notify_user_ticket_closed(ticket, admin_user):
    """Notify user about ticket closure"""
    try:
        text = get_text('messages.ticket_closed_notification',
                             ticket_id=ticket.id,
                             subject=ticket.subject)
        
        await bot.send_message(ticket.user_id, text)
        
    except Exception as e:
        logging.error(f"Error in notify_user_ticket_closed: {e}")


# ===== CANCEL HANDLER =====

@router.message(F.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞')
async def cancel_support_operation(message: types.Message, state: FSMContext):
    """Cancel support operation"""
    current_state = await state.get_state()
    
    if current_state and 'FSMSupport' in str(current_state):
        await state.clear()
        
        is_admin = message.from_user.id in config.ADMINS or message.from_user.id in utils.get_admins()
        
        if is_admin:
            await message.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.markup_remove())
            # Show admin dashboard
            fake_call = types.CallbackQuery(
                id="fake",
                from_user=message.from_user,
                chat_instance="fake",
                data="admin_support",
                message=message
            )
            await admin_support_dashboard(fake_call, state)
        else:
            await message.answer(
                '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
                reply_markup=kb.markup_remove()
            )
            await message.answer(
                get_text('messages.support_welcome'),
                reply_markup=kb.markup_support_menu()
            )