import config
import logging
import utils
import os
import json
import re
import keyboards as kb
from message_utils import send_msg
from database import user, lesson
from datetime import datetime
from aiogram import Bot, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from states import FSMAdminRights, FSMLesson, FSMSettings, FSMPromocode, FSMTranslations
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ bot –∏–∑ bot_instance
from bot_instance import bot
from localization import get_text

router = Router()

u = user.User()
l = lesson.Lesson()
p = lesson.Purchase()
s = lesson.SystemSettings()
promo = lesson.Promocode()

logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
)


@router.message(Command('admin'))
async def admin(message: types.Message, state: FSMContext):
    logging.info("admin.py: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin –≤—ã–∑–≤–∞–Ω")
    data_admins = utils.get_admins()
    
    if(await state.get_state() != None):
        await state.clear()

    if(message.from_user.id not in config.ADMINS and message.from_user.id not in data_admins):
        await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')    
        return
    
    if(message.from_user.id in config.ADMINS):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif(message.from_user.id in data_admins):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
        
    await message.answer(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{message.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{message.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(message.from_user.id))
    
    
@router.callback_query(F.data == 'backAdmin')
async def backAdmin(call: types.CallbackQuery, state: FSMContext):
    data_admins = utils.get_admins()

    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')    
        return
    
    if(call.from_user.id in config.ADMINS):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif(call.from_user.id in data_admins):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
        
    await call.answer()
    await call.message.edit_text(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{call.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(call.from_user.id))


# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π cancel_handler
# @router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
# async def cancel(message: types.Message, state: FSMContext):
#     print(f"üö® admin.py: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–≤–∞–Ω! –¢–µ–∫—Å—Ç: '{message.text}'")
#     # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
#     current_state = await state.get_state()
#     logging.info(f"üîç admin.py cancel: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = {current_state}")
#     print(f"üîç admin.py cancel: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = {current_state}")
#     
#     if current_state and 'FSMMail' in current_state:
#         logging.info(f"‚è≠Ô∏è admin.py: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {current_state}")
#         print(f"‚è≠Ô∏è admin.py: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {current_state}")
#         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ mail.py —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
#         return
#     
#     if current_state != None:
#         await state.clear()
#         
#     data_admins = utils.get_admins()
# 
#     if message.from_user.id in config.ADMINS or message.from_user.id in data_admins:    
#         await message.answer('‚ùå –û—Ç–º–µ–Ω–æ', reply_markup=kb.markup_remove())
#         await message.answer(' ', reply_markup=kb.markup_remove())
#         await admin(message, state)
    
    
@router.callback_query(F.data == 'adminRights')
async def adminRights(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMAdminRights.user)
    
    await call.answer()
    cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_admin_rights')]
    ])
    await call.message.edit_text("üëâ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_markup)
    
    
@router.callback_query(F.data == 'cancel_admin_rights')
async def cancel_admin_rights(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    data_admins = utils.get_admins()
    
    if call.from_user.id in config.ADMINS:
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif call.from_user.id in data_admins:
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
        
    await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.edit_text(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{call.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(call.from_user.id))


@router.message(FSMAdminRights.user)
async def userAdminRights(message: types.Message, state: FSMAdminRights):
    data_admins = utils.get_admins()
    
    user = message.text
    if user and user.isdigit():
        user_id = int(user)
        
        if user_id not in data_admins:
            data_admins.append(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user}</code> —É—Å–ø–µ—à–Ω–æ <b>–¥–æ–±–∞–≤–ª–µ–Ω</b>", parse_mode='html', reply_markup=kb.markup_remove())
        elif user_id in data_admins:
            data_admins.remove(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user}</code> —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª–µ–Ω</b>", parse_mode='html', reply_markup=kb.markup_remove())
            
        utils.update_admins(data_admins)
        return
    
    else:
        cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_admin_rights')]
        ])
        await message.answer("üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_markup)


# ===== NEW SHOP ADMIN HANDLERS =====

@router.callback_query(F.data == 'lessons_mgmt')
async def lessons_management(call: types.CallbackQuery, state: FSMContext):
    """Lessons management menu"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    await call.message.edit_text(
        'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
        reply_markup=kb.markup_lessons_management()
    )


@router.callback_query(F.data == 'settings')
async def settings_menu(call: types.CallbackQuery, state: FSMContext):
    """Settings menu"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        return
    
    await call.answer()
    await call.message.edit_text(
        '‚õôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        reply_markup=kb.markup_admin_settings()
    )


@router.callback_query(F.data == 'add_lesson')
async def add_lesson_start(call: types.CallbackQuery, state: FSMContext):
    """Start adding new lesson"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        return
    
    await state.set_state(FSMLesson.title)
    await state.update_data(mode='add')  # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await call.answer()
    await call.message.edit_text(
        'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:',
        reply_markup=None
    )


# ===== FSMLesson Message Handlers =====

@router.message(FSMLesson.title)
async def add_lesson_title(message: types.Message, state: FSMContext):
    """Handle lesson title input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    title = message.text.strip()
    if not title:
        await message.answer('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            success = await l.update_lesson(lesson_id, title=title)
            if success:
                await message.answer('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=kb.markup_remove())
                await state.clear()
                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(title=title)
    await state.set_state(FSMLesson.description)
    await message.answer('üëâ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:')


@router.message(FSMLesson.description)
async def add_lesson_description(message: types.Message, state: FSMContext):
    """Handle lesson description input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    description = message.text.strip()
    if not description:
        await message.answer('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            success = await l.update_lesson(lesson_id, description=description)
            if success:
                await message.answer('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=kb.markup_remove())
                await state.clear()
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(description=description)
    await state.set_state(FSMLesson.price)
    await message.answer('üëâ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Ä–æ–∫–∞ –≤ USD (0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ):')


@router.message(FSMLesson.price)
async def add_lesson_price(message: types.Message, state: FSMContext):
    """Handle lesson price input"""
    from decimal import Decimal, InvalidOperation
    
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    try:
        price = Decimal(message.text.strip())
        if price < 0:
            await message.answer('‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:')
            return
    except (InvalidOperation, ValueError):
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
        return
    
    is_free = (price == 0)
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            success = await l.update_lesson(lesson_id, price_usd=price, is_free=is_free)
            if success:
                await message.answer('‚úÖ –¶–µ–Ω–∞ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=kb.markup_remove())
                await state.clear()
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(price_usd=price, is_free=is_free)
    await state.set_state(FSMLesson.content)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞ (–∏–ª–∏ —Ç–µ–∫—Å—Ç /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):')


@router.message(FSMLesson.content)
async def add_lesson_content(message: types.Message, state: FSMContext):
    """Handle lesson content input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    content_type = None
    file_id = None
    
    if message.text == '/skip':
        content_type = 'text'
        file_id = None
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
    elif message.document:
        content_type = 'document'
        file_id = message.document.file_id
    elif message.text:
        content_type = 'text'
        file_id = None
        await state.update_data(text_content=message.text)
    else:
        await message.answer('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            update_data = {'content_type': content_type}
            if content_type == 'video':
                update_data['video_file_id'] = file_id
            elif content_type == 'document':
                update_data['document_file_id'] = file_id
            elif content_type == 'text' and message.text != '/skip':
                update_data['text_content'] = message.text
            
            success = await l.update_lesson(lesson_id, **update_data)
            if success:
                await message.answer('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=kb.markup_remove())
                await state.clear()
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(content_type=content_type, video_file_id=file_id)
    await state.set_state(FSMLesson.preview)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ (—Ç—Ä–µ–π–ª–µ—Ä) –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):')


@router.message(FSMLesson.preview)
async def add_lesson_preview(message: types.Message, state: FSMContext):
    """Handle lesson preview input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    preview_video_file_id = None
    preview_text = None
    
    if message.text == '/skip':
        pass
    elif message.video:
        preview_video_file_id = message.video.file_id
    elif message.text:
        preview_text = message.text
    else:
        await message.answer('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            update_data = {}
            if preview_video_file_id:
                update_data['preview_video_file_id'] = preview_video_file_id
            if preview_text:
                update_data['preview_text'] = preview_text
            
            if update_data:
                success = await l.update_lesson(lesson_id, **update_data)
                if success:
                    await message.answer('‚úÖ –ü—Ä–µ–≤—å—é —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=kb.markup_remove())
                else:
                    await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é')
            await state.clear()
            await edit_lesson_fields_refresh(message, state, lesson_id)
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(preview_video_file_id=preview_video_file_id, preview_text=preview_text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—å—é
    title = data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
    price = data.get('price_usd', 0)
    is_free = data.get('is_free', False)
    
    price_text = 'üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û' if is_free else f'üí∞ ${price}'
    
    preview_message = f"""üìö <b>–ü—Ä–µ–≤—å—é –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
{price_text}

‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫?"""
    
    await message.answer(
        preview_message,
        parse_mode='html',
        reply_markup=kb.markup_add_preview_actions()
    )


# ===== Lesson Add Save/Cancel Callbacks =====

@router.callback_query(F.data == 'add_lesson_save')
async def add_lesson_save(call: types.CallbackQuery, state: FSMContext):
    """Save new lesson to database"""
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
        lesson_id = await l.create_lesson(
            title=data.get('title'),
            description=data.get('description'),
            price_usd=data.get('price_usd', 0),
            is_free=data.get('is_free', False),
            is_active=True,
            content_type=data.get('content_type', 'video'),
            video_file_id=data.get('video_file_id'),
            preview_video_file_id=data.get('preview_video_file_id'),
            preview_text=data.get('preview_text'),
            text_content=data.get('text_content')
        )
        
        await state.clear()
        await call.answer('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        await call.message.edit_text(
            f'‚úÖ –£—Ä–æ–∫ "{data.get("title")}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\nüìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
            reply_markup=kb.markup_lessons_management()
        )
    except Exception as e:
        logging.error(f"Error creating lesson: {e}")
        await call.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞')
        await call.message.edit_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞',
            reply_markup=kb.markup_lessons_management()
        )


@router.callback_query(F.data == 'add_lesson_cancel')
async def add_lesson_cancel(call: types.CallbackQuery, state: FSMContext):
    """Cancel lesson creation"""
    await state.clear()
    await call.answer('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await call.message.edit_text(
        'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
        reply_markup=kb.markup_lessons_management()
    )


# ===== Edit Lesson Handlers =====

@router.callback_query(F.data == 'edit_lesson')
async def edit_lesson_list(call: types.CallbackQuery, state: FSMContext):
    """Show list of lessons for editing"""
    await call.answer()
    
    lessons = await l.get_all_lessons(active_only=False)
    
    if not lessons:
        await call.message.edit_text(
            'üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω
    current_text = '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
    if call.message.text == current_text:
        # –£–∂–µ –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return
    
    await call.message.edit_text(
        current_text,
        reply_markup=kb.markup_lesson_edit_list(lessons)
    )


@router.callback_query(F.data.startswith('edit_lesson_id:'))
async def edit_lesson_fields(call: types.CallbackQuery, state: FSMContext):
    """Show edit options for specific lesson"""
    await call.answer()
    
    lesson_id = int(call.data.split(':')[1])
    lesson = await l.get_lesson(lesson_id)
    
    if not lesson:
        await call.message.edit_text(
            '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if lesson.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    price_text = "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û" if lesson.is_free else f"üí∞ ${lesson.price_usd}"
    
    text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>

üìö {lesson.title}
üí∞ {price_text}
üìä {status}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"""
    
    await call.message.edit_text(
        text,
        parse_mode='html',
        reply_markup=kb.markup_lesson_edit_fields(lesson_id)
    )


async def edit_lesson_fields_refresh(message_or_call, state: FSMContext, lesson_id: int):
    """Refresh edit lesson screen"""
    lesson = await l.get_lesson(lesson_id)
    
    if not lesson:
        text = '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        markup = kb.markup_lessons_management()
    else:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if lesson.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        price_text = "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û" if lesson.is_free else f"üí∞ ${lesson.price_usd}"
        
        text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>

üìö {lesson.title}
üí∞ {price_text}
üìä {status}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"""
        markup = kb.markup_lesson_edit_fields(lesson_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    if isinstance(message_or_call, types.CallbackQuery):
        await message_or_call.message.edit_text(
            text,
            parse_mode='html',
            reply_markup=markup
        )
    else:
        # –î–ª—è Message –æ–±—ä–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_call.answer(
            text,
            parse_mode='html',
            reply_markup=markup
        )


# ===== Field Edit Handlers =====

@router.callback_query(F.data.startswith('edit_field:'))
async def edit_field_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing specific field"""
    await call.answer()
    
    parts = call.data.split(':')
    field = parts[1]
    lesson_id = int(parts[2])
    
    await state.update_data(mode='edit', edit_lesson_id=lesson_id, edit_field=field)
    
    prompts = {
        'title': ('FSMLesson.title', 'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:'),
        'description': ('FSMLesson.description', 'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:'),
        'price': ('FSMLesson.price', 'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ USD (0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ):'),
        'video': ('FSMLesson.content', 'üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞:'),
        'preview': ('FSMLesson.preview', 'üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é (–≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç):')
    }
    
    if field in prompts:
        state_name, prompt = prompts[field]
        if state_name == 'FSMLesson.title':
            await state.set_state(FSMLesson.title)
        elif state_name == 'FSMLesson.description':
            await state.set_state(FSMLesson.description)
        elif state_name == 'FSMLesson.price':
            await state.set_state(FSMLesson.price)
        elif state_name == 'FSMLesson.content':
            await state.set_state(FSMLesson.content)
        elif state_name == 'FSMLesson.preview':
            await state.set_state(FSMLesson.preview)
        
        await call.message.edit_text(prompt)


# ===== Toggle Handlers =====

@router.callback_query(F.data.startswith('toggle_active:'))
async def toggle_lesson_active(call: types.CallbackQuery, state: FSMContext):
    """Toggle lesson active status"""
    lesson_id = int(call.data.split(':')[1])
    
    lesson = await l.get_lesson(lesson_id)
    if not lesson:
        await call.answer('‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    new_status = not lesson.is_active
    success = await l.update_lesson(lesson_id, is_active=new_status)
    
    if success:
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        await call.answer(f"‚úÖ –£—Ä–æ–∫ {status_text}")
        await edit_lesson_fields_refresh(call, state, lesson_id)
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')


@router.callback_query(F.data.startswith('toggle_free:'))
async def toggle_lesson_free(call: types.CallbackQuery, state: FSMContext):
    """Toggle lesson free status"""
    lesson_id = int(call.data.split(':')[1])
    
    lesson = await l.get_lesson(lesson_id)
    if not lesson:
        await call.answer('‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    new_free_status = not lesson.is_free
    update_data = {'is_free': new_free_status}
    
    # –ï—Å–ª–∏ –¥–µ–ª–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, —Å—Ç–∞–≤–∏–º —Ü–µ–Ω—É 0
    if new_free_status:
        update_data['price_usd'] = 0
    
    success = await l.update_lesson(lesson_id, **update_data)
    
    if success:
        status_text = "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º" if new_free_status else "–ø–ª–∞—Ç–Ω—ã–º"
        await call.answer(f"‚úÖ –£—Ä–æ–∫ —Å—Ç–∞–ª {status_text}")
        await edit_lesson_fields_refresh(call, state, lesson_id)
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')


# ===== Delete Lesson Handlers =====

@router.callback_query(F.data == 'delete_lesson')
async def delete_lesson_list(call: types.CallbackQuery, state: FSMContext):
    """Show list of lessons for deletion"""
    await call.answer()
    
    lessons = await l.get_all_lessons(active_only=False)
    
    if not lessons:
        await call.message.edit_text(
            'üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    await call.message.edit_text(
        'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=kb.markup_lesson_delete_list(lessons)
    )


@router.callback_query(F.data.startswith('delete_lesson_id:'))
async def delete_lesson_confirm(call: types.CallbackQuery, state: FSMContext):
    """Ask for deletion confirmation"""
    await call.answer()
    
    lesson_id = int(call.data.split(':')[1])
    lesson = await l.get_lesson(lesson_id)
    
    if not lesson:
        await call.message.edit_text(
            '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    await call.message.edit_text(
        f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ "{lesson.title}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!',
        reply_markup=kb.markup_confirm_delete(lesson_id)
    )


@router.callback_query(F.data.startswith('confirm_delete:'))
async def confirm_delete_lesson(call: types.CallbackQuery, state: FSMContext):
    """Confirm and delete lesson"""
    lesson_id = int(call.data.split(':')[1])
    
    success = await l.delete_lesson(lesson_id)
    
    if success:
        await call.answer('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É—Ä–æ–∫–∏
        lessons = await l.get_all_lessons(active_only=False)
        if lessons:
            await call.message.edit_text(
                'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                reply_markup=kb.markup_lesson_delete_list(lessons)
            )
        else:
            await call.message.edit_text(
                '‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n\nüìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
                reply_markup=kb.markup_lessons_management()
            )
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞')


@router.callback_query(F.data.startswith('cancel_delete:'))
async def cancel_delete_lesson(call: types.CallbackQuery, state: FSMContext):
    """Cancel lesson deletion"""
    await call.answer('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    
    lessons = await l.get_all_lessons(active_only=False)
    
    if lessons:
        await call.message.edit_text(
            'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            reply_markup=kb.markup_lesson_delete_list(lessons)
        )
    else:
        await call.message.edit_text(
            'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
            reply_markup=kb.markup_lessons_management()
        )


# End of file
