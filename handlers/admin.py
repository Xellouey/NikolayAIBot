import config
import logging
import utils
import os
import json
import re
import keyboards as kb
from message_utils import send_msg
from database import user, lesson
from datetime import datetime
from aiogram import Bot, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from states import FSMAdminRights, FSMLesson, FSMSettings, FSMPromocode, FSMTranslations
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ bot –∏–∑ bot_instance
from bot_instance import bot
from localization import get_text

router = Router()

u = user.User()
l = lesson.Lesson()
p = lesson.Purchase()
s = lesson.SystemSettings()
promo = lesson.Promocode()

logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
)


@router.message(Command('admin'))
async def admin(message: types.Message, state: FSMContext):
    data_admins = utils.get_admins()
    
    if(await state.get_state() != None):
        await state.clear()

    if(message.from_user.id not in config.ADMINS and message.from_user.id not in data_admins):
        await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')    
        return
    
    if(message.from_user.id in config.ADMINS):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif(message.from_user.id in data_admins):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
        
    await message.answer(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{message.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{message.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(message.from_user.id))
    
    
@router.callback_query(F.data == 'backAdmin')
async def backAdmin(call: types.CallbackQuery, state: FSMContext):
    data_admins = utils.get_admins()

    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')    
        return
    
    if(call.from_user.id in config.ADMINS):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif(call.from_user.id in data_admins):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
        
    await call.answer()
    await call.message.edit_text(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{call.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(call.from_user.id))


@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel(message: types.Message, state: FSMContext):
    if await state.get_state() != None:
        await state.clear()
        
    data_admins = utils.get_admins()

    if message.from_user.id in config.ADMINS or message.from_user.id in data_admins:    
        await message.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.markup_remove())
        await message.answer(' ', reply_markup=kb.markup_remove())
        await admin(message, state)
    
    
@router.callback_query(F.data == 'adminRights')
async def adminRights(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMAdminRights.user)
    
    await call.answer()
    cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_admin_rights')]
    ])
    await call.message.edit_text("üëâ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_markup)
    
    
@router.callback_query(F.data == 'cancel_admin_rights')
async def cancel_admin_rights(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    data_admins = utils.get_admins()
    
    if call.from_user.id in config.ADMINS:
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif call.from_user.id in data_admins:
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
        
    await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.edit_text(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{call.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(call.from_user.id))


@router.message(FSMAdminRights.user)
async def userAdminRights(message: types.Message, state: FSMAdminRights):
    data_admins = utils.get_admins()
    
    user = message.text
    if user and user.isdigit():
        user_id = int(user)
        
        if user_id not in data_admins:
            data_admins.append(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user}</code> —É—Å–ø–µ—à–Ω–æ <b>–¥–æ–±–∞–≤–ª–µ–Ω</b>", parse_mode='html', reply_markup=kb.markup_remove())
        elif user_id in data_admins:
            data_admins.remove(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user}</code> —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª–µ–Ω</b>", parse_mode='html', reply_markup=kb.markup_remove())
            
        utils.update_admins(data_admins)
        return
    
    else:
        cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_admin_rights')]
        ])
        await message.answer("üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_markup)


# ===== NEW SHOP ADMIN HANDLERS =====

@router.callback_query(F.data == 'lessons_mgmt')
async def lessons_management(call: types.CallbackQuery, state: FSMContext):
    """Lessons management menu"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    await call.message.edit_text(
        'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
        reply_markup=kb.markup_lessons_management()
    )


@router.callback_query(F.data == 'settings')
async def settings_menu(call: types.CallbackQuery, state: FSMContext):
    """Settings menu"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        return
    
    await call.answer()
    await call.message.edit_text(
        '‚õôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        reply_markup=kb.markup_admin_settings()
    )


@router.callback_query(F.data == 'add_lesson')
async def add_lesson_start(call: types.CallbackQuery, state: FSMContext):
    """Start adding new lesson"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        return
    
    await state.set_state(FSMLesson.title)
    await call.answer()
    await call.message.edit_text(
        'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:',
        reply_markup=None
    )


# End of file - other handlers should be in separate files
