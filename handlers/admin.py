import config
import logging
import utils
import os
import json
import re
import keyboards as kb
from message_utils import send_msg
from database import user, lesson
from datetime import datetime
from aiogram import Bot, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from states import FSMAdminRights, FSMLesson, FSMSettings, FSMPromocode, FSMTranslations
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ bot –∏–∑ bot_instance
from bot_instance import bot
from localization import get_text

router = Router()

u = user.User()
l = lesson.Lesson()
p = lesson.Purchase()
s = lesson.SystemSettings()
promo = lesson.Promocode()

logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
)


@router.message(Command('admin'))
async def admin(message: types.Message, state: FSMContext):
    logging.info("admin.py: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin –≤—ã–∑–≤–∞–Ω")
    data_admins = utils.get_admins()
    
    if(await state.get_state() != None):
        await state.clear()

    if(message.from_user.id not in config.ADMINS and message.from_user.id not in data_admins):
        await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')    
        return
    
    if(message.from_user.id in config.ADMINS):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif(message.from_user.id in data_admins):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    else:
        text_rights = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
    await message.answer(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{message.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{message.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(message.from_user.id))
    
    
@router.callback_query(F.data == 'backAdmin')
async def backAdmin(call: types.CallbackQuery, state: FSMContext):
    data_admins = utils.get_admins()

    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')    
        return
    
    if(call.from_user.id in config.ADMINS):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif(call.from_user.id in data_admins):
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    else:
        text_rights = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
    await call.answer()
    await call.message.edit_text(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{call.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(call.from_user.id))


# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π cancel_handler
# @router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
# async def cancel(message: types.Message, state: FSMContext):
#     print(f"üö® admin.py: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–≤–∞–Ω! –¢–µ–∫—Å—Ç: '{message.text}'")
#     # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
#     current_state = await state.get_state()
#     logging.info(f"üîç admin.py cancel: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = {current_state}")
#     print(f"üîç admin.py cancel: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = {current_state}")
#     
#     if current_state and 'FSMMail' in current_state:
#         logging.info(f"‚è≠Ô∏è admin.py: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {current_state}")
#         print(f"‚è≠Ô∏è admin.py: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {current_state}")
#         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ mail.py —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
#         return
#     
#     if current_state != None:
#         await state.clear()
#         
#     data_admins = utils.get_admins()
# 
#     if message.from_user.id in config.ADMINS or message.from_user.id in data_admins:    
#         await message.answer('‚ùå –û—Ç–º–µ–Ω–æ', reply_markup=kb.markup_remove())
#         await message.answer(' ', reply_markup=kb.markup_remove())
#         await admin(message, state)
    
    
@router.callback_query(F.data == 'adminRights')
async def adminRights(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMAdminRights.user)
    
    await call.answer()
    cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_admin_rights')]
    ])
    await call.message.edit_text("üëâ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_markup)
    
    
@router.callback_query(F.data == 'cancel_admin_rights')
async def cancel_admin_rights(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    data_admins = utils.get_admins()
    
    if call.from_user.id in config.ADMINS:
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –≤—Å–∏–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    elif call.from_user.id in data_admins:
        text_rights = "–í—ã –æ–±–ª–∞–¥–∞–µ—Çe –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîë"
    else:
        text_rights = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
    await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.edit_text(f"""
## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëΩ

–í–∞—à–µ –∏–º—è: <b>{call.from_user.full_name}</b>
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.id}</b>

{text_rights}
""", parse_mode='html', reply_markup=kb.markup_admin(call.from_user.id))


@router.message(FSMAdminRights.user)
async def userAdminRights(message: types.Message, state: FSMAdminRights):
    data_admins = utils.get_admins()
    
    user = message.text
    if user and user.isdigit():
        user_id = int(user)
        
        if user_id not in data_admins:
            data_admins.append(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user}</code> —É—Å–ø–µ—à–Ω–æ <b>–¥–æ–±–∞–≤–ª–µ–Ω</b>", parse_mode='html', reply_markup=kb.markup_remove())
        elif user_id in data_admins:
            data_admins.remove(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user}</code> —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª–µ–Ω</b>", parse_mode='html', reply_markup=kb.markup_remove())
            
        utils.update_admins(data_admins)
        return
    
    else:
        cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_admin_rights')]
        ])
        await message.answer("üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_markup)


# ===== NEW SHOP ADMIN HANDLERS =====

@router.callback_query(F.data == 'lessons_mgmt')
async def lessons_management(call: types.CallbackQuery, state: FSMContext):
    """Lessons management menu"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    await call.message.edit_text(
        'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
        reply_markup=kb.markup_lessons_management()
    )


@router.callback_query(F.data == 'settings')
async def settings_menu(call: types.CallbackQuery, state: FSMContext):
    """Settings menu"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        return
    
    await call.answer()
    await call.message.edit_text(
        '‚õôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        reply_markup=kb.markup_admin_settings()
    )


@router.callback_query(F.data == 'add_lesson')
async def add_lesson_start(call: types.CallbackQuery, state: FSMContext):
    """Start adding new lesson"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer()
        return
    
    await state.set_state(FSMLesson.title)
    await state.update_data(mode='add')  # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await call.answer()
    await call.message.edit_text(
        'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:',
        reply_markup=None
    )


# ===== FSMLesson Message Handlers =====

@router.message(FSMLesson.title)
async def add_lesson_title(message: types.Message, state: FSMContext):
    """Handle lesson title input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    title = message.text.strip()
    if not title:
        await message.answer('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            success = await l.update_lesson(lesson_id, title=title)
            if success:
                await message.answer('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=kb.markup_remove())
                await state.clear()
                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(title=title)
    await state.set_state(FSMLesson.description)
    await message.answer('üëâ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:')


@router.message(FSMLesson.description)
async def add_lesson_description(message: types.Message, state: FSMContext):
    """Handle lesson description input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    description = message.text.strip()
    if not description:
        await message.answer('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            success = await l.update_lesson(lesson_id, description=description)
            if success:
                await message.answer('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=kb.markup_remove())
                await state.clear()
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(description=description)
    await state.set_state(FSMLesson.price)
    await message.answer('üëâ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Ä–æ–∫–∞ –≤ USD (0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ):')


@router.message(FSMLesson.price)
async def add_lesson_price(message: types.Message, state: FSMContext):
    """Handle lesson price input"""
    from decimal import Decimal, InvalidOperation
    
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    try:
        # Check if message.text is None
        if message.text is None:
            await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
            return
        
        price = Decimal(message.text.strip())
        if price < 0:
            await message.answer('‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:')
            return
    except (InvalidOperation, ValueError):
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
        return
    
    is_free = (price == 0)
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            success = await l.update_lesson(lesson_id, price_usd=price, is_free=is_free)
            if success:
                await message.answer('‚úÖ –¶–µ–Ω–∞ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=kb.markup_remove())
                await state.clear()
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(price_usd=price, is_free=is_free)
    await state.set_state(FSMLesson.content)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞ (–∏–ª–∏ —Ç–µ–∫—Å—Ç /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):')


@router.message(FSMLesson.content)
async def add_lesson_content(message: types.Message, state: FSMContext):
    """Handle lesson content input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    content_type = None
    file_id = None
    
    if message.text == '/skip':
        content_type = 'text'
        file_id = None
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
    elif message.document:
        content_type = 'document'
        file_id = message.document.file_id
    elif message.text:
        content_type = 'text'
        file_id = None
        await state.update_data(text_content=message.text)
    else:
        await message.answer('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            update_data = {'content_type': content_type}
            if content_type == 'video':
                update_data['video_file_id'] = file_id
            elif content_type == 'document':
                update_data['document_file_id'] = file_id
            elif content_type == 'text' and message.text != '/skip':
                update_data['text_content'] = message.text
            
            success = await l.update_lesson(lesson_id, **update_data)
            if success:
                await message.answer('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=kb.markup_remove())
                await state.clear()
                await edit_lesson_fields_refresh(message, state, lesson_id)
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(content_type=content_type, video_file_id=file_id)
    await state.set_state(FSMLesson.preview)
    await message.answer('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ (—Ç—Ä–µ–π–ª–µ—Ä) –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):')


@router.message(FSMLesson.preview)
async def add_lesson_preview(message: types.Message, state: FSMContext):
    """Handle lesson preview input"""
    data = await state.get_data()
    mode = data.get('mode', 'add')
    
    preview_video_file_id = None
    preview_text = None
    
    if message.text == '/skip':
        pass
    elif message.video:
        preview_video_file_id = message.video.file_id
    elif message.text:
        preview_text = message.text
    else:
        await message.answer('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é:')
        return
    
    if mode == 'edit':
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = data.get('edit_lesson_id')
        if lesson_id:
            update_data = {}
            if preview_video_file_id:
                update_data['preview_video_file_id'] = preview_video_file_id
            if preview_text:
                update_data['preview_text'] = preview_text
            
            if update_data:
                success = await l.update_lesson(lesson_id, **update_data)
                if success:
                    await message.answer('‚úÖ –ü—Ä–µ–≤—å—é —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=kb.markup_remove())
                else:
                    await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é')
            await state.clear()
            await edit_lesson_fields_refresh(message, state, lesson_id)
        return
    
    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(preview_video_file_id=preview_video_file_id, preview_text=preview_text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—å—é
    title = data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
    price = data.get('price_usd', 0)
    is_free = data.get('is_free', False)
    
    price_text = 'üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û' if is_free else f'üí∞ ${price}'
    
    preview_message = f"""üìö <b>–ü—Ä–µ–≤—å—é –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
{price_text}

‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫?"""
    
    await message.answer(
        preview_message,
        parse_mode='html',
        reply_markup=kb.markup_add_preview_actions()
    )


# ===== Lesson Add Save/Cancel Callbacks =====

@router.callback_query(F.data == 'add_lesson_save')
async def add_lesson_save(call: types.CallbackQuery, state: FSMContext):
    """Save new lesson to database"""
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
        lesson_id = await l.create_lesson(
            title=data.get('title'),
            description=data.get('description'),
            price_usd=data.get('price_usd', 0),
            is_free=data.get('is_free', False),
            is_active=True,
            content_type=data.get('content_type', 'video'),
            video_file_id=data.get('video_file_id'),
            preview_video_file_id=data.get('preview_video_file_id'),
            preview_text=data.get('preview_text'),
            text_content=data.get('text_content')
        )
        
        await state.clear()
        await call.answer('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        await call.message.edit_text(
            f'‚úÖ –£—Ä–æ–∫ "{data.get("title")}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\nüìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
            reply_markup=kb.markup_lessons_management()
        )
    except Exception as e:
        logging.error(f"Error creating lesson: {e}")
        await call.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞')
        await call.message.edit_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞',
            reply_markup=kb.markup_lessons_management()
        )


@router.callback_query(F.data == 'add_lesson_cancel')
async def add_lesson_cancel(call: types.CallbackQuery, state: FSMContext):
    """Cancel lesson creation"""
    await state.clear()
    await call.answer('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await call.message.edit_text(
        'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
        reply_markup=kb.markup_lessons_management()
    )


# ===== Edit Lesson Handlers =====

@router.callback_query(F.data == 'edit_lesson')
async def edit_lesson_list(call: types.CallbackQuery, state: FSMContext):
    """Show list of lessons for editing"""
    await call.answer()
    
    lessons = await l.get_all_lessons(active_only=False)
    
    if not lessons:
        await call.message.edit_text(
            'üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω
    current_text = '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
    if call.message.text == current_text:
        # –£–∂–µ –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return
    
    await call.message.edit_text(
        current_text,
        reply_markup=kb.markup_lesson_edit_list(lessons)
    )


@router.callback_query(F.data.startswith('edit_lesson_id:'))
async def edit_lesson_fields(call: types.CallbackQuery, state: FSMContext):
    """Show edit options for specific lesson"""
    await call.answer()
    
    lesson_id = int(call.data.split(':')[1])
    lesson = await l.get_lesson(lesson_id)
    
    if not lesson:
        await call.message.edit_text(
            '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if lesson.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    price_text = "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û" if lesson.is_free else f"üí∞ ${lesson.price_usd}"
    
    text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>

üìö {lesson.title}
üí∞ {price_text}
üìä {status}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"""
    
    await call.message.edit_text(
        text,
        parse_mode='html',
        reply_markup=kb.markup_lesson_edit_fields(lesson_id)
    )


async def edit_lesson_fields_refresh(message_or_call, state: FSMContext, lesson_id: int):
    """Refresh edit lesson screen"""
    lesson = await l.get_lesson(lesson_id)
    
    if not lesson:
        text = '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        markup = kb.markup_lessons_management()
    else:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if lesson.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        price_text = "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û" if lesson.is_free else f"üí∞ ${lesson.price_usd}"
        
        text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>

üìö {lesson.title}
üí∞ {price_text}
üìä {status}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"""
        markup = kb.markup_lesson_edit_fields(lesson_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    if isinstance(message_or_call, types.CallbackQuery):
        await message_or_call.message.edit_text(
            text,
            parse_mode='html',
            reply_markup=markup
        )
    else:
        # –î–ª—è Message –æ–±—ä–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_call.answer(
            text,
            parse_mode='html',
            reply_markup=markup
        )


# ===== Field Edit Handlers =====

@router.callback_query(F.data.startswith('edit_field:'))
async def edit_field_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing specific field"""
    await call.answer()
    
    parts = call.data.split(':')
    field = parts[1]
    lesson_id = int(parts[2])
    
    await state.update_data(mode='edit', edit_lesson_id=lesson_id, edit_field=field)
    
    prompts = {
        'title': ('FSMLesson.title', 'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:'),
        'description': ('FSMLesson.description', 'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:'),
        'price': ('FSMLesson.price', 'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ USD (0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ):'),
        'video': ('FSMLesson.content', 'üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞:'),
        'preview': ('FSMLesson.preview', 'üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é (–≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç):')
    }
    
    if field in prompts:
        state_name, prompt = prompts[field]
        if state_name == 'FSMLesson.title':
            await state.set_state(FSMLesson.title)
        elif state_name == 'FSMLesson.description':
            await state.set_state(FSMLesson.description)
        elif state_name == 'FSMLesson.price':
            await state.set_state(FSMLesson.price)
        elif state_name == 'FSMLesson.content':
            await state.set_state(FSMLesson.content)
        elif state_name == 'FSMLesson.preview':
            await state.set_state(FSMLesson.preview)
        
        await call.message.edit_text(prompt)


# ===== Toggle Handlers =====

@router.callback_query(F.data.startswith('toggle_active:'))
async def toggle_lesson_active(call: types.CallbackQuery, state: FSMContext):
    """Toggle lesson active status"""
    lesson_id = int(call.data.split(':')[1])
    
    lesson = await l.get_lesson(lesson_id)
    if not lesson:
        await call.answer('‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    new_status = not lesson.is_active
    success = await l.update_lesson(lesson_id, is_active=new_status)
    
    if success:
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        await call.answer(f"‚úÖ –£—Ä–æ–∫ {status_text}")
        await edit_lesson_fields_refresh(call, state, lesson_id)
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')


@router.callback_query(F.data.startswith('toggle_free:'))
async def toggle_lesson_free(call: types.CallbackQuery, state: FSMContext):
    """Toggle lesson free status"""
    lesson_id = int(call.data.split(':')[1])
    
    lesson = await l.get_lesson(lesson_id)
    if not lesson:
        await call.answer('‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    new_free_status = not lesson.is_free
    update_data = {'is_free': new_free_status}
    
    # –ï—Å–ª–∏ –¥–µ–ª–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, —Å—Ç–∞–≤–∏–º —Ü–µ–Ω—É 0
    if new_free_status:
        update_data['price_usd'] = 0
    
    success = await l.update_lesson(lesson_id, **update_data)
    
    if success:
        status_text = "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º" if new_free_status else "–ø–ª–∞—Ç–Ω—ã–º"
        await call.answer(f"‚úÖ –£—Ä–æ–∫ —Å—Ç–∞–ª {status_text}")
        await edit_lesson_fields_refresh(call, state, lesson_id)
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')


# ===== Delete Lesson Handlers =====

@router.callback_query(F.data == 'delete_lesson')
async def delete_lesson_list(call: types.CallbackQuery, state: FSMContext):
    """Show list of lessons for deletion"""
    await call.answer()
    
    lessons = await l.get_all_lessons(active_only=False)
    
    if not lessons:
        await call.message.edit_text(
            'üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    await call.message.edit_text(
        'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=kb.markup_lesson_delete_list(lessons)
    )


@router.callback_query(F.data.startswith('delete_lesson_id:'))
async def delete_lesson_confirm(call: types.CallbackQuery, state: FSMContext):
    """Ask for deletion confirmation"""
    await call.answer()
    
    lesson_id = int(call.data.split(':')[1])
    lesson = await l.get_lesson(lesson_id)
    
    if not lesson:
        await call.message.edit_text(
            '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=kb.markup_lessons_management()
        )
        return
    
    await call.message.edit_text(
        f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ "{lesson.title}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!',
        reply_markup=kb.markup_confirm_delete(lesson_id)
    )


@router.callback_query(F.data.startswith('confirm_delete:'))
async def confirm_delete_lesson(call: types.CallbackQuery, state: FSMContext):
    """Confirm and delete lesson"""
    lesson_id = int(call.data.split(':')[1])
    
    success = await l.delete_lesson(lesson_id)
    
    if success:
        await call.answer('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É—Ä–æ–∫–∏
        lessons = await l.get_all_lessons(active_only=False)
        if lessons:
            await call.message.edit_text(
                'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                reply_markup=kb.markup_lesson_delete_list(lessons)
            )
        else:
            await call.message.edit_text(
                '‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n\nüìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
                reply_markup=kb.markup_lessons_management()
            )
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞')


@router.callback_query(F.data.startswith('cancel_delete:'))
async def cancel_delete_lesson(call: types.CallbackQuery, state: FSMContext):
    """Cancel lesson deletion"""
    await call.answer('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    
    lessons = await l.get_all_lessons(active_only=False)
    
    if lessons:
        await call.message.edit_text(
            'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            reply_markup=kb.markup_lesson_delete_list(lessons)
        )
    else:
        await call.message.edit_text(
            'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏',
            reply_markup=kb.markup_lessons_management()
        )


# ===== PROMOCODES HANDLERS =====

@router.callback_query(F.data == 'promocodes')
async def promocodes_menu(call: types.CallbackQuery, state: FSMContext):
    """Promocodes management menu with list - ADMIN ONLY"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    promocodes = await promo.get_all_promocodes()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    text = 'üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n'
    
    if promocodes:
        text += 'üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n'
        text += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n'
        
        for p in promocodes:
            # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
            if not p.get('is_active', False):
                continue
                
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–¥–∫–µ –∏–∑ –±–∞–∑—ã
            discount_type = p.get('discount_type', 'percentage')
            discount_value = p.get('discount_value', 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if discount_type == 'percentage':
                # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –¥–æ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                discount_percent = float(discount_value) * 100 if float(discount_value) <= 1 else float(discount_value)
                discount_text = f"{int(discount_percent)}%" if discount_percent.is_integer() else f"{discount_percent:.1f}%"
            else:  # fixed
                # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                discount_amount = float(discount_value)
                discount_text = f"${int(discount_amount)}" if discount_amount.is_integer() else f"${discount_amount:.2f}"
            
            usage_count = p.get('used_count', 0)  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ - used_count, –∞ –Ω–µ usage_count
            usage_limit = p.get('usage_limit')
            usage_text = f"{usage_count}/{usage_limit if usage_limit else '‚àû'}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            expires_at = p.get('expires_at')
            if expires_at:
                from datetime import datetime
                if isinstance(expires_at, str):
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ISO –∏ 'YYYY-MM-DD HH:MM:SS'
                    try:
                        expires_at = datetime.fromisoformat(expires_at)
                    except ValueError:
                        # Fallback: –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª –Ω–∞ 'T'
                        try:
                            expires_at = datetime.fromisoformat(expires_at.replace(' ', 'T'))
                        except Exception:
                            expires_at = None
                expires_text = f"–¥–æ {expires_at.strftime('%d.%m.%Y %H:%M')}" if expires_at else '–±–µ—Å—Å—Ä–æ—á–Ω–æ'
            else:
                expires_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            
            text += f"üé´ <code>{p.get('code', 'N/A')}</code>\n"
            text += f"   üí∞ –°–∫–∏–¥–∫–∞: {discount_text}\n"
            text += f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_text}\n"
            text += f"   ‚è∞ –°—Ä–æ–∫: {expires_text}\n\n"
    else:
        text += 'üì≠ <i>–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</i>\n\n'
    
    text += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
    text += 'üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>'
    
    await call.answer()
    await call.message.edit_text(
        text,
        parse_mode='html',
        reply_markup=kb.markup_promocodes_management()
    )


@router.callback_query(F.data == 'add_promocode')
async def add_promocode_start(call: types.CallbackQuery, state: FSMContext):
    """Start adding new promocode"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await state.set_state(FSMPromocode.code)
    await call.answer()
    await call.message.edit_text('üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:')


# –£–¥–∞–ª–µ–Ω–æ - —Å–ø–∏—Å–æ–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –≤ –º–µ–Ω—é promocodes

# ===== PROMOCODE DELETE HANDLERS =====

@router.callback_query(F.data == 'delete_promocode_menu')
async def delete_promocode_menu(call: types.CallbackQuery, state: FSMContext):
    """Menu for selecting promocode to delete"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    promocodes = await promo.get_all_promocodes(only_active=True)
    
    if not promocodes:
        await call.answer('üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç')
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
        await promocodes_menu(call, state)
        return
    
    await call.answer()
    await call.message.edit_text(
        'üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>',
        parse_mode='html',
        reply_markup=kb.markup_promocodes_delete_list(promocodes, promo.format_discount)
    )


@router.callback_query(F.data.startswith('delete_promocode:'))
async def delete_promocode_confirm(call: types.CallbackQuery, state: FSMContext):
    """Ask for deletion confirmation"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    promo_id = int(call.data.split(':')[1])
    promocode = await promo.get_promocode_by_id(promo_id)
    
    if not promocode:
        await call.answer('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await delete_promocode_menu(call, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    code = promocode.code if hasattr(promocode, 'code') else 'N/A'
    dtype = promocode.discount_type if hasattr(promocode, 'discount_type') else 'percentage'
    dval = promocode.discount_value if hasattr(promocode, 'discount_value') else 0
    discount_text = promo.format_discount(dtype, dval)
    
    await call.answer()
    await call.message.edit_text(
        f'''‚ùå <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>

–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code>?
–°–∫–∏–¥–∫–∞: {discount_text}

‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!''',
        parse_mode='html',
        reply_markup=kb.markup_confirm_delete_promocode(promo_id)
    )


@router.callback_query(F.data.startswith('confirm_delete_promocode:'))
async def confirm_delete_promocode(call: types.CallbackQuery, state: FSMContext):
    """Actually delete the promocode"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    promo_id = int(call.data.split(':')[1])
    success = await promo.delete_promocode(promo_id)
    
    if success:
        await call.answer('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
    else:
        await call.answer('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å–æ —Å–ø–∏—Å–∫–æ–º
    await promocodes_menu(call, state)

# ===== PROMOCODE CREATE HANDLERS (FSM) =====

@router.message(FSMPromocode.code)
async def add_promocode_code(message: types.Message, state: FSMContext):
    """Handle promocode code input"""
    import re
    
    code = message.text.strip().upper()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    if not re.match(r'^[A-Z0-9_-]+$', code):
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
    existing = await promo.get_promocode_any(code)
    if existing:
        await message.answer('‚ùå –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:')
        return
    
    await state.update_data(code=code)
    await message.answer(
        'üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:</b>',
        parse_mode='html',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìä –ü—Ä–æ—Ü–µ–Ω—Ç', callback_data='promo_disc_type:percentage')],
            [InlineKeyboardButton(text='üíµ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞', callback_data='promo_disc_type:fixed')],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_promocode')]
        ])
    )


@router.callback_query(F.data.startswith('promo_disc_type:'))
async def add_promocode_type(call: types.CallbackQuery, state: FSMContext):
    """Handle discount type selection"""
    dtype = call.data.split(':')[1]
    await state.update_data(discount_type=dtype)
    await state.set_state(FSMPromocode.discount_value)
    
    if dtype == 'percentage':
        msg = 'üëâ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (1-100):'
    else:
        msg = 'üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 7.5):'
    
    await call.answer()
    await call.message.edit_text(msg)


@router.message(FSMPromocode.discount_value)
async def add_promocode_value(message: types.Message, state: FSMContext):
    """Handle discount value input"""
    data = await state.get_data()
    dtype = data.get('discount_type')
    
    # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Ç–æ—á–∫—É, –∏ –∑–∞–ø—è—Ç—É—é)
    try:
        value_str = message.text.strip().replace(',', '.')
        value = float(value_str)
    except ValueError:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if dtype == 'percentage':
        if not (1 <= value <= 100):
            await message.answer('‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –¥–æ–ª—é (0-1) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π
        value = value / 100
    else:  # fixed
        if value <= 0:
            await message.answer('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')
            return
    
    await state.update_data(discount_value=value)
    await state.set_state(FSMPromocode.usage_limit)
    await message.answer('üëâ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):')


@router.message(FSMPromocode.usage_limit)
async def add_promocode_limit(message: types.Message, state: FSMContext):
    """Handle usage limit input"""
    try:
        limit = int(message.text.strip())
        if limit < 0:
            raise ValueError
    except ValueError:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0:')
        return
    
    # 0 = None (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
    await state.update_data(usage_limit=limit if limit > 0 else None)
    await state.set_state(FSMPromocode.expiry_date)
    from datetime import datetime, timedelta
    example_text = (datetime.now() + timedelta(days=7)).replace(hour=23, minute=59, second=0, microsecond=0).strftime('%d.%m.%Y %H:%M')
    await message.answer(
        'üëâ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è\n'
        '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n'
        '–ò–ª–∏ 0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n'
        f'–ù–∞–ø—Ä–∏–º–µ—Ä: {example_text}',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_promocode')]])
    )


@router.message(FSMPromocode.expiry_date)
async def add_promocode_expiry(message: types.Message, state: FSMContext):
    """Handle expiry date input"""
    from datetime import datetime
    
    text = message.text.strip()
    
    if text == '0':
        expires_at = None
        expires_text = '–±–µ—Å—Å—Ä–æ—á–Ω–æ'
    else:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)
            expires_at = datetime.strptime(text, '%d.%m.%Y %H:%M')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º
            now = datetime.now()
            if expires_at <= now:
                await message.answer(
                    '‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.\n'
                    '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ 0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ:',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_promocode')]])
                )
                return
            
            expires_text = f"–¥–æ {expires_at.strftime('%d.%m.%Y %H:%M')}"
        except ValueError:
            from datetime import timedelta
            example_text = (datetime.now() + timedelta(days=7)).replace(hour=23, minute=59, second=0, microsecond=0).strftime('%d.%m.%Y %H:%M')
            await message.answer(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ 0:',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_promocode')]])
            )
            return
    
    await state.update_data(expires_at=expires_at)
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑—é–º–µ
    data = await state.get_data()
    code = data.get('code')
    dtype = data.get('discount_type')
    dvalue = data.get('discount_value')
    limit = data.get('usage_limit')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    discount_display = promo.format_discount(dtype, dvalue)
    dtype_text = '–ü—Ä–æ—Ü–µ–Ω—Ç' if dtype == 'percentage' else '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
    limit_text = f'{limit} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π' if limit else '–±–µ–∑ –ª–∏–º–∏—Ç–∞'
    
    text = f'''üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>

‚Ä¢ –ö–æ–¥: <code>{code}</code>
‚Ä¢ –¢–∏–ø: {dtype_text}
‚Ä¢ –°–∫–∏–¥–∫–∞: {discount_display}
‚Ä¢ –õ–∏–º–∏—Ç: {limit_text}
‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç: {expires_text}'''
    
    await message.answer(
        text,
        parse_mode='html',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –°–æ–∑–¥–∞—Ç—å', callback_data='confirm_add_promocode')],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_promocode')]
        ])
    )


@router.callback_query(F.data == 'confirm_add_promocode')
async def confirm_add_promocode(call: types.CallbackQuery, state: FSMContext):
    """Confirm and create promocode"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    data = await state.get_data()
    
    try:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        code = data.get('code')
        if await promo.get_promocode_any(code):
            await call.answer('‚ùå –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.', show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–æ–∫–æ–¥
        await promo.create_promocode(
            code=code,
            discount_type=data.get('discount_type'),
            discount_value=data.get('discount_value'),
            usage_limit=data.get('usage_limit'),
            expires_at=data.get('expires_at')
        )
        
        await call.answer('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω')
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å–æ —Å–ø–∏—Å–∫–æ–º
        await promocodes_menu(call, state)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        # –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        err_text = str(e)
        if 'UNIQUE constraint failed' in err_text or 'UNIQUE constraint' in err_text:
            await call.answer('‚ùå –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.', show_alert=True)
        else:
            await call.answer(f'‚ùå –û—à–∏–±–∫–∞: {err_text[:100]}', show_alert=True)


@router.callback_query(F.data == 'cancel_promocode')
async def cancel_promocode(call: types.CallbackQuery, state: FSMContext):
    """Cancel promocode creation/editing"""
    await state.clear()
    await call.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å–æ —Å–ø–∏—Å–∫–æ–º
    await promocodes_menu(call, state)


# ===== TEXT SETTINGS HANDLERS =====

@router.callback_query(F.data == 'text_settings')
async def text_settings_menu(call: types.CallbackQuery, state: FSMContext):
    """Text settings menu - ADMIN ONLY"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    
    text = '''üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞.

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:'''
    
    await call.message.edit_text(
        text,
        parse_mode='html',
        reply_markup=kb.markup_text_categories()
    )


@router.callback_query(F.data.startswith('text_category:'))
async def text_category_selected(call: types.CallbackQuery, state: FSMContext):
    """Handle text category selection"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    category = call.data.split(':')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
    allowed_categories = ['buttons', 'messages']
    if category not in allowed_categories:
        await call.answer('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    await state.update_data(text_category=category)
    
    category_names = {
        'buttons': 'üîò –ö–Ω–æ–ø–∫–∏',
        'messages': 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è'
    }
    
    category_name = category_names.get(category, category)
    
    await call.answer()
    await call.message.edit_text(
        f'üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
        parse_mode='html',
        reply_markup=kb.markup_text_keys(category)
    )


@router.callback_query(F.data.startswith('text_key:'))
async def text_key_selected(call: types.CallbackQuery, state: FSMContext):
    """Handle text key selection for editing"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    parts = call.data.split(':')
    category = parts[1]
    key = parts[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
    allowed_categories = ['buttons', 'messages']
    if category not in allowed_categories:
        await call.answer('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    texts = utils.get_interface_texts()
    current_value = texts.get(category, {}).get(key, '')
    
    await state.update_data(text_category=category, text_key=key)
    await state.set_state(FSMSettings.text_value)
    
    await call.answer()
    await call.message.edit_text(
        f'''üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>
–ö–ª—é—á: <b>{key}</b>

–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
<code>{current_value}</code>

üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞:''',
        parse_mode='html'
    )


@router.message(FSMSettings.text_value)
async def save_text_value(message: types.Message, state: FSMContext):
    """Save new text value with validation and logging"""
    data = await state.get_data()
    category = data.get('text_category')
    key = data.get('text_key')
    new_value = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
    allowed_categories = ['buttons', 'messages']
    if category not in allowed_categories:
        await message.answer('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        await state.clear()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if len(new_value) > 4096:
        await message.answer(
            '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.',
            parse_mode='html'
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)
    if category == 'buttons' and len(new_value) > 64:
        await message.answer(
            '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.',
            parse_mode='html'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ HTML —Ç–µ–≥–∏
    dangerous_tags = ['<script', '<iframe', '<object', '<embed', '<form']
    if any(tag in new_value.lower() for tag in dangerous_tags):
        await message.answer(
            '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ HTML —Ç–µ–≥–∏.\n–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: b, i, u, s, code, pre, a',
            parse_mode='html'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    texts = utils.get_interface_texts()
    old_value = texts.get(category, {}).get(key, '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if category not in texts:
        texts[category] = {}
    texts[category][key] = new_value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    utils.save_interface_texts(texts)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    logging.info(f"Text edited by admin {message.from_user.id} ({message.from_user.full_name}): "
                 f"category='{category}', key='{key}', "
                 f"old='{old_value[:50]}...', new='{new_value[:50]}...'")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏—Ç–∞
    try:
        import json
        from datetime import datetime
        audit_log = {
            'timestamp': datetime.now().isoformat(),
            'admin_id': message.from_user.id,
            'admin_name': message.from_user.full_name,
            'category': category,
            'key': key,
            'old_value': old_value,
            'new_value': new_value
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª –∞—É–¥–∏—Ç–∞
        audit_file = 'json/text_edits_audit.json'
        try:
            with open(audit_file, 'r', encoding='utf-8') as f:
                audit_data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            audit_data = []
        
        audit_data.append(audit_log)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if len(audit_data) > 1000:
            audit_data = audit_data[-1000:]
        
        with open(audit_file, 'w', encoding='utf-8') as f:
            json.dump(audit_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"Error saving audit log: {e}")
    
    await state.clear()
    await message.answer(
        f'''‚úÖ <b>–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>
–ö–ª—é—á: <b>{key}</b>
–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{new_value}</code>''',
        parse_mode='html',
        reply_markup=kb.markup_text_categories()
    )


# ===== CURRENCY RATE HANDLERS =====

@router.callback_query(F.data == 'currency_rate')
async def currency_rate_menu(call: types.CallbackQuery, state: FSMContext):
    """Currency rate settings - ADMIN ONLY"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    current_rate = await s.get_usd_to_stars_rate()
    
    await state.set_state(FSMSettings.currency_rate)
    await call.answer()
    await call.message.edit_text(
        f'''üí± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç</b>

–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 USD = {current_rate} ‚≠ê Stars

üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –∑–∞ 1 USD):''',
        parse_mode='html'
    )


@router.message(FSMSettings.currency_rate)
async def save_currency_rate(message: types.Message, state: FSMContext):
    """Save new currency rate"""
    try:
        new_rate = float(message.text.strip())
        if new_rate <= 0:
            await message.answer('‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
        await s.set_usd_to_stars_rate(new_rate)
        
        await state.clear()
        await message.answer(
            f'''‚úÖ <b>–ö—É—Ä—Å –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

–ù–æ–≤—ã–π –∫—É—Ä—Å: 1 USD = {new_rate} ‚≠ê Stars

–í—Å–µ —Ü–µ–Ω—ã –≤ –±–æ—Ç–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –ø–æ –Ω–æ–≤–æ–º—É –∫—É—Ä—Å—É.''',
            parse_mode='html',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥', callback_data='settings')]
            ])
        )
    except ValueError:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 75.5):')


# ===== STATISTICS HANDLERS =====

@router.callback_query(F.data == 'statistics')
async def statistics_menu(call: types.CallbackQuery, state: FSMContext):
    """Statistics menu - ADMIN ONLY"""
    data_admins = utils.get_admins()
    
    if(call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins):
        await call.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from database import user as user_module
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    total_users = await u.get_total_users()
    today_users = await u.get_users_count_since(datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))
    week_users = await u.get_users_count_since(datetime.now() - timedelta(days=7))
    
    # –ü—Ä–æ–¥–∞–∂–∏
    total_sales = await p.get_sales_stats()
    today_sales = await p.get_sales_stats_period(1)
    week_sales = await p.get_sales_stats_period(7)
    
    # –£—Ä–æ–∫–∏
    total_lessons = len(await l.get_all_lessons(active_only=False))
    active_lessons = len(await l.get_all_lessons(active_only=True))
    
    # –ü—Ä–æ–º–æ–∫–æ–¥—ã
    total_promocodes = len(await promo.get_all_promocodes())
    
    text = f'''üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚îú –í—Å–µ–≥–æ: {total_users}
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: +{today_users}
‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: +{week_users}

üí∞ <b>–ü—Ä–æ–¥–∞–∂–∏:</b>
‚îú –í—Å–µ–≥–æ: {total_sales['count']} —à—Ç (${total_sales['total']:.2f})
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_sales['count']} —à—Ç (${today_sales['total']:.2f})
‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: {week_sales['count']} —à—Ç (${week_sales['total']:.2f})

üìö <b>–£—Ä–æ–∫–∏:</b>
‚îú –í—Å–µ–≥–æ: {total_lessons}
‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_lessons}

üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b> {total_promocodes}'''
    
    await call.answer()
    await call.message.edit_text(
        text,
        parse_mode='html',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥', callback_data='backAdmin')]
        ])
    )


# End of file
