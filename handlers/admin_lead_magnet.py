"""Admin handlers for lead magnet management"""
import logging
import config
import utils
import keyboards as kb
from aiogram import Bot, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import FSMLeadMagnet
from database.lead_magnet import LeadMagnet
from bot_instance import bot

router = Router()

logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
)


def markup_lead_magnet_menu(is_enabled: bool, has_video: bool):
    """Lead magnet management menu keyboard - ALWAYS IN RUSSIAN"""
    toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
    
    items = [
        [InlineKeyboardButton(text=toggle_text, callback_data='lead_toggle')],
        [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', callback_data='lead_edit_text')],
        [InlineKeyboardButton(text='üé¨ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ', callback_data='lead_edit_video')],
        [InlineKeyboardButton(text='üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ ¬´–ú–æ–∏—Ö —É—Ä–æ–∫–∞—Ö¬ª', callback_data='lead_edit_label')],
    ]
    
    if has_video:
        items.append([InlineKeyboardButton(text='üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data='lead_preview')])
    
    items.append([InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥', callback_data='backAdmin')])
    
    return InlineKeyboardMarkup(inline_keyboard=items)


@router.callback_query(F.data == 'lead_magnet')
async def lead_magnet_menu(call: types.CallbackQuery, state: FSMContext):
    """Lead magnet management menu"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    
    # Get current lead magnet configuration
    lead_magnet = await LeadMagnet.get_lead_magnet()
    if not lead_magnet:
        await call.message.edit_text(
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞',
            reply_markup=kb.markup_admin_shop(call.from_user.id)
        )
        return
    
    text = f"""
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º</b>

–õ–∏–¥-–º–∞–≥–Ω–∏—Ç ‚Äî —ç—Ç–æ –≤–≤–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –±–æ—Ç–∞.

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if lead_magnet.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
üé¨ –í–∏–¥–µ–æ: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if lead_magnet.video_file_id else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await call.message.edit_text(
        text,
        reply_markup=markup_lead_magnet_menu(
            lead_magnet.enabled, 
            bool(lead_magnet.video_file_id)
        ),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_toggle')
async def lead_toggle(call: types.CallbackQuery, state: FSMContext):
    """Toggle lead magnet on/off"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    lead_magnet = await LeadMagnet.get_lead_magnet()
    if not lead_magnet:
        await call.answer("‚ùå –û—à–∏–±–∫–∞")
        return
    
    # Check if video exists before enabling
    if not lead_magnet.enabled and not lead_magnet.video_file_id:
        await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ!", show_alert=True)
        return
    
    # Toggle status
    new_status = not lead_magnet.enabled
    success = await LeadMagnet.set_enabled(new_status)
    
    if success:
        await call.answer(f"‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        # Refresh menu
        await lead_magnet_menu(call, state)
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data == 'lead_edit_text')
async def lead_edit_text_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing greeting text"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    # –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    current_text = await LeadMagnet.get_text_for_locale('greeting_text', 'ru')
    
    await state.set_state(FSMLeadMagnet.editing_text)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</b>

–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:
<i>{current_text}</i>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.message(FSMLeadMagnet.editing_text)
async def process_greeting_text(message: types.Message, state: FSMContext):
    """Process new greeting text"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    success = await LeadMagnet.set_greeting_text('ru', message.text)
    
    if success:
        await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    lead_magnet = await LeadMagnet.get_lead_magnet()
    text = f"""
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º</b>

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if lead_magnet.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
üé¨ –í–∏–¥–µ–æ: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if lead_magnet.video_file_id else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
"""
    
    await message.answer(
        text,
        reply_markup=markup_lead_magnet_menu(
            lead_magnet.enabled,
            bool(lead_magnet.video_file_id)
        ),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_edit_video')
async def lead_edit_video_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing video"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    await state.set_state(FSMLeadMagnet.editing_video)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        """üé¨ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 2 –º–∏–Ω—É—Ç""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.message(FSMLeadMagnet.editing_video)
async def process_video(message: types.Message, state: FSMContext):
    """Process uploaded video"""
    if message.content_type != 'video':
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        return
    
    video = message.video
    
    # Check video size (50 MB limit)
    if video.file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë.")
        return
    
    # Save video file_id
    success = await LeadMagnet.set_video(video.file_id)
    
    if success:
        await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    lead_magnet = await LeadMagnet.get_lead_magnet()
    text = f"""
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º</b>

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if lead_magnet.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
üé¨ –í–∏–¥–µ–æ: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ
"""
    
    await message.answer(
        text,
        reply_markup=markup_lead_magnet_menu(
            lead_magnet.enabled,
            True
        ),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_edit_label')
async def lead_edit_label_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing lessons label"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    # –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    current_label = await LeadMagnet.get_text_for_locale('lessons_label', 'ru')
    
    await state.set_state(FSMLeadMagnet.editing_label)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        f"""üè∑Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ ¬´–ú–æ–∏—Ö —É—Ä–æ–∫–∞—Ö¬ª</b>

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:
<i>{current_label}</i>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ —É—Ä–æ–∫–∏¬ª:""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.message(FSMLeadMagnet.editing_label)
async def process_label(message: types.Message, state: FSMContext):
    """Process new label"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    success = await LeadMagnet.set_lessons_label('ru', message.text)
    
    if success:
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    lead_magnet = await LeadMagnet.get_lead_magnet()
    text = f"""
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º</b>

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if lead_magnet.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
üé¨ –í–∏–¥–µ–æ: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if lead_magnet.video_file_id else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
"""
    
    await message.answer(
        text,
        reply_markup=markup_lead_magnet_menu(
            lead_magnet.enabled,
            bool(lead_magnet.video_file_id)
        ),
        parse_mode='HTML'
    )




@router.callback_query(F.data == 'lead_preview')
async def lead_preview(call: types.CallbackQuery, state: FSMContext):
    """Preview lead magnet"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    lead_magnet = await LeadMagnet.get_lead_magnet()
    if not lead_magnet or not lead_magnet.video_file_id:
        await call.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", show_alert=True)
        return
    
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    greeting_text = await LeadMagnet.get_text_for_locale('greeting_text', 'ru')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    await bot.send_video(
        chat_id=call.from_user.id,
        video=lead_magnet.video_file_id,
        caption=f"üé¨ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n{greeting_text}",
        parse_mode='HTML'
    )
    
    await call.answer("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


@router.callback_query(F.data == 'cancel_lead_edit')
async def cancel_lead_edit(call: types.CallbackQuery, state: FSMContext):
    """Cancel current edit operation"""
    await state.clear()
    await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    # Return to menu
    await lead_magnet_menu(call, state)
