"""Admin handlers for lead magnet management with multi-content support"""
import logging
import config
import utils
import keyboards as kb
from aiogram import Bot, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import FSMLeadMagnet
from database.lead_magnet import LeadMagnet
from bot_instance import bot

router = Router()

logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(name)s - %(filename)s - %(message)s",
)


def markup_content_type_selection():
    """Content type selection menu"""
    items = [
        [InlineKeyboardButton(text='üé¨ –í–∏–¥–µ–æ', callback_data='lead_select_video')],
        [InlineKeyboardButton(text='üñºÔ∏è –§–æ—Ç–æ', callback_data='lead_select_photo')],
        [InlineKeyboardButton(text='üìÅ –§–∞–π–ª/–î–æ–∫—É–º–µ–Ω—Ç', callback_data='lead_select_document')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_lead_edit')]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=items)


def markup_lead_magnet_menu(is_enabled: bool, content_type: str = None, has_content: bool = False):
    """Lead magnet management menu keyboard - ALWAYS IN RUSSIAN"""
    toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
    
    items = [
        [InlineKeyboardButton(text=toggle_text, callback_data='lead_toggle')],
        [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', callback_data='lead_edit_text')],
    ]
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not has_content:
        items.append([InlineKeyboardButton(text='üìé –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç', callback_data='lead_add_content')])
    else:
        items.append([InlineKeyboardButton(text='üìé –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', callback_data='lead_edit_content')])
    
    items.append([InlineKeyboardButton(text='üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ ¬´–ú–æ–∏—Ö —É—Ä–æ–∫–∞—Ö¬ª', callback_data='lead_edit_label')])
    
    if has_content:
        items.append([InlineKeyboardButton(text='üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data='lead_preview')])
    
    items.append([InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥', callback_data='backAdmin')])
    
    return InlineKeyboardMarkup(inline_keyboard=items)


# =============================================================================
# –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
# =============================================================================

@router.callback_query(F.data == 'lead_magnet')
async def lead_magnet_menu(call: types.CallbackQuery, state: FSMContext):
    """Lead magnet management menu"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        await call.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
        return
    
    await call.answer()
    
    # Get current lead magnet configuration
    lead_magnet = await LeadMagnet.get_lead_magnet()
    if not lead_magnet:
        await call.message.edit_text(
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞',
            reply_markup=kb.markup_admin_shop(call.from_user.id)
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–µ–¥–∏–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ)
    media_type, media_id, doc_id = await LeadMagnet.get_content_bundle()
    has_media = media_id is not None
    has_doc = doc_id is not None
    
    if has_media:
        media_status = 'üé¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' if media_type == 'video' else 'üñºÔ∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
    else:
        media_status = '‚ùå –ú–µ–¥–∏–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
    doc_status = 'üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω' if has_doc else '‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
    
    text = f"""
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º</b>

–õ–∏–¥-–º–∞–≥–Ω–∏—Ç ‚Äî —ç—Ç–æ –≤–≤–æ–¥–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –±–æ—Ç–∞.
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ (–≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ) –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç.

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if lead_magnet.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
{media_status}
{doc_status}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await call.message.edit_text(
        text,
        reply_markup=markup_lead_magnet_menu(
            lead_magnet.enabled, 
            content_type,
            has_content
        ),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_toggle')
async def lead_toggle(call: types.CallbackQuery, state: FSMContext):
    """Toggle lead magnet on/off"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    lead_magnet = await LeadMagnet.get_lead_magnet()
    if not lead_magnet:
        await call.answer("‚ùå –û—à–∏–±–∫–∞")
        return
    
    # Check if content exists before enabling
    content_type, file_id = await LeadMagnet.get_current_content()
    if not lead_magnet.enabled and not file_id:
        await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç!", show_alert=True)
        return
    
    # Toggle status
    new_status = not lead_magnet.enabled
    success = await LeadMagnet.set_enabled(new_status)
    
    if success:
        await call.answer(f"‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        # Refresh menu
        await lead_magnet_menu(call, state)
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


# =============================================================================
# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–´–ë–û–†–ê –¢–ò–ü–ê –ö–û–ù–¢–ï–ù–¢–ê
# =============================================================================

@router.callback_query(F.data == 'lead_add_content')
@router.callback_query(F.data == 'lead_edit_content')
async def lead_content_menu(call: types.CallbackQuery, state: FSMContext):
    """Show content type selection menu"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    await state.set_state(FSMLeadMagnet.selecting_content_type)
    
    await call.message.edit_text(
        """üìé <b>–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å:

üé¨ <b>–í–∏–¥–µ–æ</b> - –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏
üñºÔ∏è <b>–§–æ—Ç–æ</b> - –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞, —Å—Ö–µ–º—ã, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
üìÅ <b>–§–∞–π–ª</b> - PDF, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏

üìù <b>–°—Å—ã–ª–∫–∏</b> –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.""",
        reply_markup=markup_content_type_selection(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_select_video')
async def lead_select_video(call: types.CallbackQuery, state: FSMContext):
    """Start video upload"""
    await call.answer()
    await state.set_state(FSMLeadMagnet.uploading_video)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        """üé¨ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 2 –º–∏–Ω—É—Ç""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_select_photo')
async def lead_select_photo(call: types.CallbackQuery, state: FSMContext):
    """Start photo upload"""
    await call.answer()
    await state.set_state(FSMLeadMagnet.uploading_photo)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        """üñºÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1080x1920 –∏–ª–∏ –º–µ–Ω—å—à–µ""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'lead_select_document')
async def lead_select_document(call: types.CallbackQuery, state: FSMContext):
    """Start document upload"""
    await call.answer()
    await state.set_state(FSMLeadMagnet.uploading_document)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        """üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞/–¥–æ–∫—É–º–µ–Ω—Ç–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –§–æ—Ä–º–∞—Ç: PDF, DOC, DOCX, TXT, –∏ –¥—Ä.
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
# =============================================================================

@router.message(FSMLeadMagnet.uploading_video)
async def process_video(message: types.Message, state: FSMContext):
    """Process uploaded video"""
    if message.content_type != 'video':
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        return
    
    video = message.video
    
    # Check video size (50 MB limit)
    if video.file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë.")
        return
    
    # Save video preserving document
    success = await LeadMagnet.set_media('video', video.file_id)
    
    if success:
        await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await _return_to_main_menu(message)


@router.message(FSMLeadMagnet.uploading_photo)
async def process_photo(message: types.Message, state: FSMContext):
    """Process uploaded photo"""
    if message.content_type != 'photo':
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        return
    
    photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    # Check photo size (10 MB limit)
    if photo.file_size and photo.file_size > 10 * 1024 * 1024:
        await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë.")
        return
    
    # Save photo preserving document
    success = await LeadMagnet.set_media('photo', photo.file_id)
    
    if success:
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await _return_to_main_menu(message)


@router.message(FSMLeadMagnet.uploading_document)
async def process_document(message: types.Message, state: FSMContext):
    """Process uploaded document"""
    if message.content_type != 'document':
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–∞–π–ª")
        return
    
    document = message.document
    
    # Check document size (20 MB limit)
    if document.file_size > 20 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë.")
        return
    
    # Save document preserving media
    success = await LeadMagnet.set_document(document.file_id)
    
    if success:
        await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await _return_to_main_menu(message)


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–û–í
# =============================================================================

@router.callback_query(F.data == 'lead_edit_text')
async def lead_edit_text_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing greeting text"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    # –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    current_text = await LeadMagnet.get_text_for_locale('greeting_text', 'ru')
    
    await state.set_state(FSMLeadMagnet.editing_text)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</b>

–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:
<i>{current_text}</i>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.message(FSMLeadMagnet.editing_text)
async def process_greeting_text(message: types.Message, state: FSMContext):
    """Process new greeting text"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    success = await LeadMagnet.set_greeting_text('ru', message.text)
    
    if success:
        await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await _return_to_main_menu(message)


@router.callback_query(F.data == 'lead_edit_label')
async def lead_edit_label_start(call: types.CallbackQuery, state: FSMContext):
    """Start editing lessons label"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    # –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    current_label = await LeadMagnet.get_text_for_locale('lessons_label', 'ru')
    
    await state.set_state(FSMLeadMagnet.editing_label)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lead_edit")]
    ])
    
    await call.message.edit_text(
        f"""üè∑Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ ¬´–ú–æ–∏—Ö —É—Ä–æ–∫–∞—Ö¬ª</b>

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:
<i>{current_label}</i>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ —É—Ä–æ–∫–∏¬ª:""",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )


@router.message(FSMLeadMagnet.editing_label)
async def process_label(message: types.Message, state: FSMContext):
    """Process new label"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ —è–∑—ã–∫–æ–≤)
    success = await LeadMagnet.set_lessons_label('ru', message.text)
    
    if success:
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await _return_to_main_menu(message)


# =============================================================================
# –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ö–û–ù–¢–ï–ù–¢–ê
# =============================================================================

@router.callback_query(F.data == 'lead_preview')
async def lead_preview(call: types.CallbackQuery, state: FSMContext):
    """Preview lead magnet"""
    data_admins = utils.get_admins()
    
    if call.from_user.id not in config.ADMINS and call.from_user.id not in data_admins:
        await call.answer()
        return
    
    await call.answer()
    
    lead_magnet = await LeadMagnet.get_lead_magnet()
    media_type, media_id, doc_id = await LeadMagnet.get_content_bundle()
    
    if not lead_magnet or not (media_id or doc_id):
        await call.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", show_alert=True)
        return
    
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    greeting_text = await LeadMagnet.get_text_for_locale('greeting_text', 'ru')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) + –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        if media_type == 'video' and media_id:
            await bot.send_video(
                chat_id=call.from_user.id,
                video=media_id,
                caption=f"üé¨ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n{greeting_text}",
                parse_mode='HTML'
            )
        elif media_type == 'photo' and media_id:
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=media_id,
                caption=f"üñºÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n{greeting_text}",
                parse_mode='HTML'
            )
        if doc_id:
            await bot.send_document(
                chat_id=call.from_user.id,
                document=doc_id,
                caption=f"üìÅ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>",
                parse_mode='HTML'
            )
        
        await call.answer("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logging.error(f"Error sending preview: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)


# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

async def _return_to_main_menu(message: types.Message):
    """Helper function to return to main lead magnet menu"""
    lead_magnet = await LeadMagnet.get_lead_magnet()
    content_type, file_id = await LeadMagnet.get_current_content()
    has_content = file_id is not None
    
    # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if has_content:
        if content_type == 'video':
            content_status = 'üé¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
        elif content_type == 'photo':
            content_status = 'üñºÔ∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
        elif content_type == 'document':
            content_status = 'üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
        else:
            content_status = '‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω'
    else:
        content_status = '‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
    
    text = f"""
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º</b>

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if lead_magnet.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
{content_status}
"""
    
    await message.answer(
        text,
        reply_markup=markup_lead_magnet_menu(
            lead_magnet.enabled,
            content_type,
            has_content
        ),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'cancel_lead_edit')
async def cancel_lead_edit(call: types.CallbackQuery, state: FSMContext):
    """Cancel current edit operation"""
    await state.clear()
    await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    # Return to menu
    await lead_magnet_menu(call, state)