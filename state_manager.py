"""
State Manager - —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""

import logging
import json
from typing import Optional, Dict, Any, Union
from datetime import datetime, timedelta

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State

from errors import (
    global_error_handler, ErrorContext, ErrorType, ErrorSeverity, 
    StateCorruptionError
)


class StateBackup:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    def __init__(self):
        self.backups: Dict[int, Dict[str, Any]] = {}
        self.backup_ttl = timedelta(hours=24)
        self.logger = logging.getLogger(__name__)
    
    def save_backup(self, user_id: int, state_name: Optional[str], state_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            self.backups[user_id] = {
                'state_name': state_name,
                'state_data': state_data.copy(),
                'timestamp': datetime.now(),
                'backup_id': f"backup_{user_id}_{int(datetime.now().timestamp())}"
            }
            
            self.logger.debug(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def get_backup(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if user_id not in self.backups:
            return None
        
        backup = self.backups[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ backup
        if datetime.now() - backup['timestamp'] > self.backup_ttl:
            del self.backups[user_id]
            self.logger.debug(f"üóëÔ∏è –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        return backup
    
    def clear_backup(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        if user_id in self.backups:
            del self.backups[user_id]
            self.logger.debug(f"üóëÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def cleanup_expired_backups(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"""
        current_time = datetime.now()
        expired_users = []
        
        for user_id, backup in self.backups.items():
            if current_time - backup['timestamp'] > self.backup_ttl:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            del self.backups[user_id]
        
        if expired_users:
            self.logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {len(expired_users)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")


class StateValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.allowed_types = (str, int, float, bool, list, dict, type(None))
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.max_string_length = 10000
        self.max_list_length = 1000
        self.max_dict_size = 1000
        self.max_total_size = 50000  # –±–∞–π—Ç
    
    def validate_state_data(self, state_data: Dict[str, Any]) -> tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Returns:
            tuple[bool, Optional[str]]: (is_valid, error_message)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            serialized = json.dumps(state_data, ensure_ascii=False)
            if len(serialized.encode('utf-8')) > self.max_total_size:
                return False, f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç {self.max_total_size} –±–∞–π—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            for key, value in state_data.items():
                if not isinstance(key, str):
                    return False, f"–ö–ª—é—á '{key}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π"
                
                if not isinstance(value, self.allowed_types):
                    return False, f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ '{key}' –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø: {type(value)}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏
                if isinstance(value, str) and len(value) > self.max_string_length:
                    return False, f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–ª—é—á–∞ '{key}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∫–∏
                if isinstance(value, list) and len(value) > self.max_list_length:
                    return False, f"–°–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª—é—á–∞ '{key}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
                if isinstance(value, dict) and len(value) > self.max_dict_size:
                    return False, f"–°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–ª—é—á–∞ '{key}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"
            
            return True, None
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
    
    def sanitize_state_data(self, state_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        sanitized = {}
        
        for key, value in state_data.items():
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á –∫ —Å—Ç—Ä–æ–∫–µ
            clean_key = str(key)[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞
            
            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if isinstance(value, str):
                sanitized[clean_key] = value[:self.max_string_length]
            elif isinstance(value, list):
                sanitized[clean_key] = value[:self.max_list_length]
            elif isinstance(value, dict):
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è
                items = list(value.items())[:self.max_dict_size]
                sanitized[clean_key] = dict(items)
            elif isinstance(value, self.allowed_types):
                sanitized[clean_key] = value
            else:
                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                sanitized[clean_key] = str(value)[:self.max_string_length]
        
        return sanitized


class SafeStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM"""
    
    def __init__(self):
        self.backup_manager = StateBackup()
        self.validator = StateValidator()
        self.logger = logging.getLogger(__name__)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.operation_counters = {
            'get_success': 0,
            'get_error': 0,
            'set_success': 0,
            'set_error': 0,
            'update_success': 0,
            'update_error': 0,
            'clear_success': 0,
            'clear_error': 0,
            'corruption_detected': 0,
            'recoveries_performed': 0
        }
    
    async def safe_get_state_data(self, state: FSMContext, user_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ–π dict –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            state_data = await state.get_data()
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            is_valid, error_msg = self.validator.validate_state_data(state_data)
            
            if not is_valid:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_msg}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                sanitized_data = self.validator.sanitize_state_data(state_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await state.set_data(sanitized_data)
                
                self.operation_counters['get_success'] += 1
                return sanitized_data
            
            self.operation_counters['get_success'] += 1
            return state_data
            
        except Exception as e:
            self.operation_counters['get_error'] += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            context = ErrorContext(
                user_id=user_id,
                handler="safe_get_state_data",
                additional_data={"error_details": str(e)}
            )
            
            global_error_handler.logger.log_error(
                e, context, ErrorType.STATE_CORRUPTION, ErrorSeverity.MEDIUM
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup
            if user_id:
                backup = self.backup_manager.get_backup(user_id)
                if backup:
                    self.logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ backup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    try:
                        await state.set_data(backup['state_data'])
                        self.operation_counters['recoveries_performed'] += 1
                        return backup['state_data']
                    except Exception as restore_error:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup: {restore_error}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return {}
    
    async def safe_set_state(self, state: FSMContext, new_state: Union[State, str, None], 
                           user_id: Optional[int] = None) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        Args:
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            new_state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if user_id:
                try:
                    current_state_name = await state.get_state()
                    current_data = await state.get_data()
                    self.backup_manager.save_backup(
                        user_id, 
                        str(current_state_name) if current_state_name else None,
                        current_data
                    )
                except Exception as backup_error:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {backup_error}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(new_state)
            
            self.operation_counters['set_success'] += 1
            self.logger.debug(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_state}")
            return True
            
        except Exception as e:
            self.operation_counters['set_error'] += 1
            
            context = ErrorContext(
                user_id=user_id,
                handler="safe_set_state",
                additional_data={
                    "new_state": str(new_state),
                    "error_details": str(e)
                }
            )
            
            global_error_handler.logger.log_error(
                e, context, ErrorType.STATE_CORRUPTION, ErrorSeverity.HIGH
            )
            
            return False
    
    async def safe_update_data(self, state: FSMContext, data: Dict[str, Any], 
                             user_id: Optional[int] = None) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            is_valid, error_msg = self.validator.validate_state_data(data)
            
            if not is_valid:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_msg}")
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = self.validator.sanitize_state_data(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º backup
            if user_id:
                try:
                    current_state_name = await state.get_state()
                    current_data = await state.get_data()
                    self.backup_manager.save_backup(
                        user_id,
                        str(current_state_name) if current_state_name else None,
                        current_data
                    )
                except Exception as backup_error:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {backup_error}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await state.update_data(**data)
            
            self.operation_counters['update_success'] += 1
            self.logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            self.operation_counters['update_error'] += 1
            
            context = ErrorContext(
                user_id=user_id,
                handler="safe_update_data",
                additional_data={
                    "update_keys": list(data.keys()) if isinstance(data, dict) else str(data),
                    "error_details": str(e)
                }
            )
            
            global_error_handler.logger.log_error(
                e, context, ErrorType.STATE_CORRUPTION, ErrorSeverity.MEDIUM
            )
            
            return False
    
    async def safe_clear_state(self, state: FSMContext, user_id: Optional[int] = None) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        Args:
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –û—á–∏—â–∞–µ–º backup –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if user_id:
                self.backup_manager.clear_backup(user_id)
            
            await state.clear()
            
            self.operation_counters['clear_success'] += 1
            self.logger.debug(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            self.operation_counters['clear_error'] += 1
            
            context = ErrorContext(
                user_id=user_id,
                handler="safe_clear_state",
                additional_data={"error_details": str(e)}
            )
            
            global_error_handler.logger.log_error(
                e, context, ErrorType.STATE_CORRUPTION, ErrorSeverity.MEDIUM
            )
            
            return False
    
    async def handle_corrupted_state(self, state: FSMContext, user_id: int, 
                                   corruption_details: str = "") -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        Args:
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            corruption_details: –î–µ—Ç–∞–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        self.operation_counters['corruption_detected'] += 1
        
        self.logger.error(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {corruption_details}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup
        backup = self.backup_manager.get_backup(user_id)
        
        if backup:
            try:
                self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ backup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup
                if backup['state_name']:
                    await state.set_state(backup['state_name'])
                
                if backup['state_data']:
                    await state.set_data(backup['state_data'])
                
                self.operation_counters['recoveries_performed'] += 1
                self.logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ backup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
                
            except Exception as restore_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {restore_error}")
        
        # –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            await state.clear()
            self.backup_manager.clear_backup(user_id)
            
            self.logger.warning(f"‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as clear_error:
            self.logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {clear_error}")
            return False
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π"""
        total_operations = sum(self.operation_counters.values())
        
        return {
            "total_operations": total_operations,
            "counters": self.operation_counters.copy(),
            "error_rate": (
                (self.operation_counters['get_error'] + 
                 self.operation_counters['set_error'] + 
                 self.operation_counters['update_error'] + 
                 self.operation_counters['clear_error']) / max(total_operations, 1)
            ) * 100,
            "corruption_rate": (
                self.operation_counters['corruption_detected'] / max(total_operations, 1)
            ) * 100,
            "recovery_success_rate": (
                self.operation_counters['recoveries_performed'] / 
                max(self.operation_counters['corruption_detected'], 1)
            ) * 100,
            "active_backups": len(self.backup_manager.backups)
        }
    
    def cleanup_expired_data(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        self.backup_manager.cleanup_expired_backups()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
safe_state_manager = SafeStateManager()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def safe_state_operation(operation_type: str = "get"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    
    Args:
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ("get", "set", "update", "clear")
    """
    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º FSMContext –∏ user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            state_context = None
            user_id = None
            
            for arg in args:
                if isinstance(arg, FSMContext):
                    state_context = arg
                elif hasattr(arg, 'from_user') and arg.from_user:
                    user_id = arg.from_user.id
            
            if not state_context:
                # –ù–µ—Ç FSMContext, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å
                return await func(*args, **kwargs)
            
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if user_id:
                    await safe_state_manager.handle_corrupted_state(
                        state_context, user_id, f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}"
                    )
                raise StateCorruptionError(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –≤ {func.__name__}: {e}")
        
        return wrapper
    return decorator