#!/usr/bin/env python
"""
–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
import unittest
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from localization import get_text
from keyboards import markup_custom


class TestLocalization(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def test_mail_help_text_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        text = get_text('mail.messages.mail_help', 'ru')
        self.assertNotEqual(text, 'mail.messages.mail_help')
        self.assertIn('inline', text.lower())
        self.assertIn('JSON', text)
        print(f"‚úÖ –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏: {text[:50]}...")
    
    def test_button_texts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫"""
        buttons = {
            'mail.buttons.copy_json': 'üìã',
            'mail.buttons.copy_inline': '—Å—Å—ã–ª–∫',
            'mail.buttons.copy_callback': '–¥–µ–π—Å—Ç–≤'
        }
        for key, expected in buttons.items():
            text = get_text(key, 'ru')
            self.assertNotEqual(text, key)
            self.assertIn(expected, text.lower())
            print(f"‚úÖ {key}: {text}")
    
    def test_json_examples_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ JSON"""
        examples = {
            'mail.messages.json_example_inline': 'url',
            'mail.messages.json_example_callback': 'callback_data'
        }
        
        for key, expected_field in examples.items():
            text = get_text(key, 'ru')
            self.assertNotEqual(text, key)
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(text)
            self.assertIn('inline_keyboard', data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–ª—è
            found = False
            for row in data['inline_keyboard']:
                for button in row:
                    if expected_field in button:
                        found = True
                        break
            self.assertTrue(found, f"–ü–æ–ª–µ {expected_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {key}")
            print(f"‚úÖ {key}: –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å –ø–æ–ª–µ–º {expected_field}")


class TestMarkupCustom(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ markup_custom"""
    
    def test_none_handling(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ None"""
        result = markup_custom(None)
        self.assertIsNone(result)
        print("‚úÖ None –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    
    def test_inline_keyboard_with_url(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å URL"""
        keyboard = {
            "inline_keyboard": [
                [{"text": "–°–∞–π—Ç", "url": "https://example.com"}]
            ]
        }
        result = markup_custom(keyboard)
        self.assertIsNotNone(result)
        self.assertEqual(len(result.inline_keyboard), 1)
        self.assertEqual(result.inline_keyboard[0][0].url, "https://example.com")
        print("‚úÖ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å URL —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_inline_keyboard_with_callback(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å callback"""
        keyboard = {
            "inline_keyboard": [
                [{"text": "–î–µ–π—Å—Ç–≤–∏–µ", "callback_data": "action"}]
            ]
        }
        result = markup_custom(keyboard)
        self.assertIsNotNone(result)
        self.assertEqual(result.inline_keyboard[0][0].callback_data, "action")
        print("‚úÖ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å callback —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_mixed_buttons(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "URL", "url": "https://test.com"},
                    {"text": "Callback", "callback_data": "test"}
                ]
            ]
        }
        result = markup_custom(keyboard)
        self.assertIsNotNone(result)
        self.assertEqual(len(result.inline_keyboard[0]), 2)
        print("‚úÖ –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    def test_regular_keyboard_ignored(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è"""
        keyboard = {
            "keyboard": [["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"]],
            "resize_keyboard": True
        }
        result = markup_custom(keyboard)
        self.assertIsNone(result)
        print("‚úÖ –û–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
    
    def test_empty_inline_keyboard(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = {"inline_keyboard": []}
        result = markup_custom(keyboard)
        self.assertIsNotNone(result)
        self.assertEqual(len(result.inline_keyboard), 0)
        print("‚úÖ –ü—É—Å—Ç–∞—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")


class TestJSONExtraction(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    
    def test_simple_json_extraction(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON"""
        import re
        
        text = '{"inline_keyboard": [[{"text": "Test", "url": "https://test.com"}]]}'
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ JSON –≤–∞–ª–∏–¥–Ω—ã–π
        data = json.loads(text)
        self.assertIn('inline_keyboard', data)
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π JSON –ø–∞—Ä—Å–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_json_with_newlines(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        text = '''{
            "inline_keyboard": [
                [{"text": "–ö–Ω–æ–ø–∫–∞", "callback_data": "action"}]
            ]
        }'''
        
        data = json.loads(text)
        self.assertIn('inline_keyboard', data)
        print("‚úÖ JSON —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –ø–∞—Ä—Å–∏—Ç—Å—è")
    
    def test_regex_extraction_basic(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ regex –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        import re
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON –æ–±—ä–µ–∫—Ç–æ–≤
        text = '–¢–µ–∫—Å—Ç –¥–æ {"key": "value"} —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ'
        pattern = r'\{[^{}]*\}'  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        
        matches = re.findall(pattern, text)
        self.assertEqual(len(matches), 1)
        self.assertEqual(matches[0], '{"key": "value"}')
        print("‚úÖ Regex –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤")


class TestCheckPyDisabled(unittest.TestCase):
    """–¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è check.py"""
    
    def test_check_py_disabled(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ check.py –æ—Ç–∫–ª—é—á–µ–Ω –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞
        with open('check.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        self.assertIn('ENABLE_CHECK_SCHEDULER', content)
        self.assertIn('SystemExit', content)
        print("‚úÖ check.py —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")


class TestIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_localization_with_markup_custom(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ markup_custom"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        example_json = get_text('mail.messages.json_example_inline', 'ru')
        
        # –ü–∞—Ä—Å–∏–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
        keyboard = json.loads(example_json)
        result = markup_custom(keyboard)
        
        self.assertIsNotNone(result)
        self.assertTrue(len(result.inline_keyboard) > 0)
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ markup_custom —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_callback_example_integration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ —Å callback"""
        example_json = get_text('mail.messages.json_example_callback', 'ru')
        keyboard = json.loads(example_json)
        result = markup_custom(keyboard)
        
        self.assertIsNotNone(result)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Å callback_data
        found_callback = False
        for row in result.inline_keyboard:
            for button in row:
                if button.callback_data:
                    found_callback = True
                    break
        self.assertTrue(found_callback)
        print("‚úÖ –ü—Ä–∏–º–µ—Ä —Å callback —Ä–∞–±–æ—Ç–∞–µ—Ç")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("–ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –†–ê–°–°–´–õ–û–ö")
    print("=" * 60 + "\n")
    
    # –°–æ–∑–¥–∞–µ–º suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_classes = [
        TestLocalization,
        TestMarkupCustom,
        TestJSONExtraction,
        TestCheckPyDisabled,
        TestIntegration
    ]
    
    for test_class in test_classes:
        suite.addTests(loader.loadTestsFromTestCase(test_class))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    runner = unittest.TextTestRunner(verbosity=1)
    result = runner.run(suite)
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    total = result.testsRun
    passed = total - len(result.failures) - len(result.errors)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"  üí• –û—à–∏–±–æ–∫: {len(result.errors)}")
    
    if result.wasSuccessful():
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("  ‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  ‚úÖ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("  ‚úÖ –û–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
        print("  ‚úÖ JSON –ø—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã–µ")
        print("  ‚úÖ check.py –æ—Ç–∫–ª—é—á–µ–Ω")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")
        if result.failures:
            for test, _ in result.failures:
                print(f"  ‚ùå {test}")
        if result.errors:
            for test, _ in result.errors:
                print(f"  üí• {test}")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
