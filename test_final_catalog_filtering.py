#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
"""
import asyncio
from database.lesson import Lesson, Purchase

async def comprehensive_catalog_test():
    print("=" * 80)
    print("üèÜ –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ö–ê–¢–ê–õ–û–ì–ê –û–¢ –ö–£–ü–õ–ï–ù–ù–´–• –£–†–û–ö–û–í")
    print("=" * 80)
    
    l = Lesson()
    p = Purchase()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    all_lessons = await l.get_all_lessons(active_only=True)
    print(f"üìö –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_lessons)}")
    
    for lesson in all_lessons:
        lesson_type = "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô" if lesson.get('is_free', False) else f"üí∞ ${lesson.get('price_usd', 0)}"
        lead_magnet = " (–ª–∏–¥-–º–∞–≥–Ω–∏—Ç)" if lesson.get('title', '').strip() == "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫" else ""
        print(f"   ‚Ä¢ ID {lesson['id']}: {lesson['title']} ({lesson_type}){lead_magnet}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [12345, 99999, 897676474]  # –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    
    print(f"\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê –î–õ–Ø –†–ê–ó–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
    
    for user_id in test_users:
        print(f"\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ {user_id}:")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_purchases = await p.get_user_purchases(user_id)
        purchased_lesson_ids = {purchase['lesson_id'] for purchase in user_purchases}
        
        print(f"   üí≥ –ü–æ–∫—É–ø–æ–∫: {len(user_purchases)}")
        if user_purchases:
            print(f"   üìã –ö—É–ø–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏: {list(purchased_lesson_ids)}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_lessons = []
        excluded_reasons = []
        
        for lesson in all_lessons:
            # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã
            is_auto_lead_magnet = (
                lesson.get('is_free', False) and 
                lesson.get('title', '').strip() == "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫"
            )
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            is_already_purchased = lesson['id'] in purchased_lesson_ids
            
            if not is_auto_lead_magnet and not is_already_purchased:
                catalog_lessons.append(lesson)
            else:
                reason = []
                if is_auto_lead_magnet:
                    reason.append("–ª–∏–¥-–º–∞–≥–Ω–∏—Ç")
                if is_already_purchased:
                    reason.append("—É–∂–µ –∫—É–ø–ª–µ–Ω")
                excluded_reasons.append(f"ID {lesson['id']}: {' + '.join(reason)}")
        
        print(f"   üìö –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è: {len(catalog_lessons)} —É—Ä–æ–∫–æ–≤")
        
        if catalog_lessons:
            for lesson in catalog_lessons:
                lesson_type = "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô" if lesson.get('is_free', False) else f"üí∞ ${lesson.get('price_usd', 0)}"
                print(f"      ‚úÖ {lesson['title']} ({lesson_type})")
        else:
            print(f"      ‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç–æ–π - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω—ã")
        
        if excluded_reasons:
            print(f"   üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ:")
            for reason in excluded_reasons:
                print(f"      ‚Ä¢ {reason}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò:")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    max_catalog_lessons = len([
        lesson for lesson in all_lessons 
        if not (lesson.get('is_free', False) and lesson.get('title', '').strip() == "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫")
    ])
    
    print(f"   üìä –ú–∞–∫—Å–∏–º—É–º —É—Ä–æ–∫–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (–±–µ–∑ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤): {max_catalog_lessons}")
    
    success_count = 0
    for user_id in test_users:
        user_purchases = await p.get_user_purchases(user_id)
        purchased_count = len(user_purchases)
        
        expected_catalog_size = max_catalog_lessons - purchased_count
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_lessons = []
        purchased_lesson_ids = {p['lesson_id'] for p in user_purchases}
        
        for lesson in all_lessons:
            is_auto_lead_magnet = (
                lesson.get('is_free', False) and 
                lesson.get('title', '').strip() == "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫"
            )
            is_already_purchased = lesson['id'] in purchased_lesson_ids
            
            if not is_auto_lead_magnet and not is_already_purchased:
                catalog_lessons.append(lesson)
        
        actual_catalog_size = len(catalog_lessons)
        
        if actual_catalog_size == expected_catalog_size:
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {actual_catalog_size} = {expected_catalog_size} (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
            success_count += 1
        else:
            print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {actual_catalog_size} ‚â† {expected_catalog_size} (–æ—à–∏–±–∫–∞)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n" + "=" * 80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 80)
    
    if success_count == len(test_users):
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   üîπ –ö—É–ø–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞")
        print("   üîπ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã —Ç–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è")
        print("   üîπ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("\nüéâ –§–£–ù–ö–¶–ò–Ø –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print(f"‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{len(test_users)}")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(comprehensive_catalog_test())