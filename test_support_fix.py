#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ show_tickets_by_status –∏ admin_support_dashboard
–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
"""

import sys
import asyncio
import unittest
from unittest.mock import patch, AsyncMock, MagicMock
from aiogram import types
from aiogram.fsm.context import FSMContext

# –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
sys.modules['config'] = MagicMock()
sys.modules['utils'] = MagicMock()
sys.modules['keyboards'] = MagicMock()
sys.modules['database.support'] = MagicMock()
sys.modules['database.user'] = MagicMock()
sys.modules['states'] = MagicMock()
sys.modules['aiogram.fsm.context'] = MagicMock()
sys.modules['aiogram'] = MagicMock()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ç—á–∏
import config
config.ADMINS = [123456789]
config.TOKEN = "123456789:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTuuvvwwxxyyzz"  # Valid token format

import utils
utils.get_admins = MagicMock(return_value=[])
utils.get_text = MagicMock(return_value="Test text")

import keyboards as kb
kb.markup_admin_support_dashboard = MagicMock(return_value=MagicMock())
kb.markup_admin_tickets_list = MagicMock(return_value=MagicMock())

from database.support import SupportTicket
from database.user import User

# –ü–∞—Ç—á–∏–º Bot –∫–ª–∞—Å—Å
with patch('aiogram.Bot'):
    with patch('handlers.support.Bot'):
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å


def create_mock_callback_query(data, user_id=123456789):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ callback query"""
    mock_user = MagicMock()
    mock_user.id = user_id
    mock_user.full_name = "Test User"
    
    mock_message = MagicMock()
    mock_message.edit_text = AsyncMock()
    
    mock_call = MagicMock()
    mock_call.data = data
    mock_call.from_user = mock_user
    mock_call.message = mock_message
    mock_call.answer = AsyncMock()
    
    return mock_call


def create_mock_state():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ FSMContext"""
    mock_state = MagicMock()
    mock_state.get_state = AsyncMock(return_value=None)
    mock_state.set_state = AsyncMock()
    mock_state.update_data = AsyncMock()
    mock_state.clear = AsyncMock()
    mock_state.get_data = AsyncMock(return_value={})
    return mock_state


class TestSupportMessageFix(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
        self.support_ticket_mock = MagicMock()
        self.user_model_mock = MagicMock()
        
        # –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª–∏
        self.patcher_support = patch('handlers.support.support_ticket', self.support_ticket_mock)
        self.patcher_user = patch('handlers.support.user_model', self.user_model_mock)
        
        self.patcher_support.start()
        self.patcher_user.start()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        self.patcher_support.stop()
        self.patcher_user.stop()
    
    async def test_show_tickets_by_status_no_tickets_open(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ show_tickets_by_status —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤...")
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            self.support_ticket_mock.get_all_tickets = AsyncMock(return_value=[])
            
            from handlers.support import show_tickets_by_status
            
            call = create_mock_callback_query("tickets_open")
            state = create_mock_state()
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await show_tickets_by_status(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
            call.answer.assert_called_once()
            call.message.edit_text.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            args = call.message.edit_text.call_args[0]
            self.assertIn("üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ", args[0])
            self.assertIn("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", args[0])
            
            print("‚úÖ –¢–µ—Å—Ç show_tickets_by_status —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ show_tickets_by_status: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def test_show_tickets_by_status_message_not_modified_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 'message is not modified'"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 'message is not modified'...")
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            self.support_ticket_mock.get_all_tickets = AsyncMock(return_value=[])
            
            from handlers.support import show_tickets_by_status
            
            call = create_mock_callback_query("tickets_open")
            state = create_mock_state()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ "message is not modified"
            call.message.edit_text.side_effect = Exception("message is not modified: specified new message content and reply markup are exactly the same")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await show_tickets_by_status(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ call.answer –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ, –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
            self.assertEqual(call.answer.call_count, 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö
            second_call_args = call.answer.call_args_list[1][0]
            self.assertIn("–£–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–∏–∫–µ—Ç—ã", second_call_args[0])
            
            print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 'message is not modified' –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def test_admin_support_dashboard(self):
        """–¢–µ—Å—Ç –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin_support_dashboard...")
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_counts = {
                'total': 10,
                'open': 3,
                'in_progress': 2,
                'closed': 5
            }
            self.support_ticket_mock.get_tickets_count_by_status = AsyncMock(return_value=mock_counts)
            
            from handlers.support import admin_support_dashboard
            
            call = create_mock_callback_query("admin_support")
            state = create_mock_state()
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await admin_support_dashboard(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
            call.answer.assert_called_once()
            call.message.edit_text.assert_called_once()
            
            print("‚úÖ –¢–µ—Å—Ç admin_support_dashboard –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ admin_support_dashboard: {e}")
            import traceback
            traceback.print_exc()
            return False


async def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
    
    test_instance = TestSupportMessageFix()
    test_instance.setUp()
    
    tests = [
        test_instance.test_show_tickets_by_status_no_tickets_open,
        test_instance.test_show_tickets_by_status_message_not_modified_error,
        test_instance.test_admin_support_dashboard
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            failed += 1
    
    test_instance.tearDown()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ—à–ª–∏: {passed}")
    print(f"‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: {failed}")
    print(f"üìà –í—Å–µ–≥–æ: {len(tests)}")
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return False


if __name__ == "__main__":
    try:
        result = asyncio.run(run_tests())
        if result:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()