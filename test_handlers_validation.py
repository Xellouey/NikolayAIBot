"""
üß™ –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import sys
import traceback

def test_handlers_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from handlers import shop
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ shop —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ router —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(shop, 'shop_router'):
            print("‚úÖ shop_router –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå shop_router –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_callback_patterns():
    """–¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ callback"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ callback...")
    
    try:
        from aiogram import F
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã F.data
        test_patterns = [
            "lesson:1",
            "lesson:99", 
            "view_lesson:1",
            "view_lesson:99",
            "buy:1",
            "buy:99",
            "promocode:1",
            "promocode:99"
        ]
        
        for pattern in test_patterns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º startswith –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            prefix = pattern.split(':')[0] + ':'
            result = pattern.startswith(prefix)
            if result:
                print(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False

def test_utils_functions():
    """–¢–µ—Å—Ç utility —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ utility —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        import utils
        
        # –¢–µ—Å—Ç get_text
        test_text = utils.get_text('messages.catalog_title')
        if test_text and '–∫–∞—Ç–∞–ª–æ–≥' in test_text.lower():
            print("‚úÖ utils.get_text —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå utils.get_text –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return False
        
        # –¢–µ—Å—Ç calculate_stars_price
        stars = utils.calculate_stars_price(25.00)
        if stars == 5000:  # 25 * 200 = 5000
            print("‚úÖ utils.calculate_stars_price —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå utils.calculate_stars_price –≤–µ—Ä–Ω—É–ª {stars}, –æ–∂–∏–¥–∞–ª—Å—è 5000")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è utils: {e}")
        return False

def test_keyboards():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        import keyboards as kb
        
        # –¢–µ—Å—Ç main menu
        main_menu = kb.markup_main_menu()
        if main_menu:
            print("‚úÖ markup_main_menu —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå markup_main_menu –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç lesson details
        lesson_details = kb.markup_lesson_details(1)
        if lesson_details:
            print("‚úÖ markup_lesson_details —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå markup_lesson_details –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    print("=" * 60)
    
    tests = [
        test_handlers_import,
        test_callback_patterns,
        test_utils_functions,
        test_keyboards
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
                print()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            print()
    
    print("=" * 60)
    print(f"üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        print("\nüîß –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞:")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'lesson:' –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —É—Ä–æ–∫–∞")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'view_lesson:' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'buy:' –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–∫–æ–≤")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'promocode:' –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤") 
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'back_main' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("\nüéØ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç:")
        print("‚Ä¢ –ù–∞–∂–∏–º–∞—Ç—å –Ω–∞ —É—Ä–æ–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –≤–∏–¥–µ—Ç—å –∏—Ö –¥–µ—Ç–∞–ª–∏")
        print("‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏")
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)