"""
üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–¥–∞—á–∏
"""

import asyncio
import sys
from unittest.mock import Mock, AsyncMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.append('.')

async def test_currency_rate_real_scenario():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...")
    
    try:
        from handlers.admin import update_currency_rate
        from database.lesson import SystemSettings
        from database.sql import configure_database
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
        configure_database()
        s = SystemSettings()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        original_rate = await s.get_usd_to_stars_rate()
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π –∫—É—Ä—Å: {original_rate}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π mock –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "77"
        message = Mock()
        message.text = "77"
        message.answer = AsyncMock()
        
        state = Mock()
        state.clear = AsyncMock()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await update_currency_rate(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_rate = await s.get_usd_to_stars_rate()
        print(f"üìä –ù–æ–≤—ã–π –∫—É—Ä—Å: {new_rate}")
        
        if new_rate == 77:
            print("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 77!")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫—É—Ä—Å
            await s.set_usd_to_stars_rate(original_rate)
            final_rate = await s.get_usd_to_stars_rate()
            print(f"üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å: {final_rate}")
            
            return True
        else:
            print(f"‚ùå –ö—É—Ä—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è. –û–∂–∏–¥–∞–ª—Å—è 77, –ø–æ–ª—É—á–µ–Ω {new_rate}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫—É—Ä—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_button_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫"""
    print("üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        from handlers.shop import show_catalog, show_my_lessons, show_profile
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        import keyboards as kb
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        main_menu = kb.markup_main_menu()
        catalog_kb = kb.markup_catalog([])
        my_lessons_kb = kb.markup_my_lessons([])
        
        if all([main_menu, catalog_kb, my_lessons_kb]):
            print("‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–Ω–æ–ø–æ–∫: {e}")
        return False

async def test_error_handling():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        from errors import global_error_handler, handle_errors
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
        @handle_errors(redirect_on_error=True)
        async def test_function(call, state):
            return "success"
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
        call = Mock()
        call.from_user = Mock()
        call.from_user.id = 123456789
        call.answer = AsyncMock()
        
        state = Mock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å middleware –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        result = await test_function(call, state, bot=Mock(), handler=Mock())
        
        if result == "success":
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

async def test_purchase_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–æ–∫"""
    print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–æ–∫...")
    
    try:
        with patch('handlers.shop.l') as mock_lesson, \
             patch('handlers.shop.p') as mock_purchase, \
             patch('handlers.shop.global_message_manager') as mock_msg:
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
            mock_lesson.get_lesson = AsyncMock(return_value=Mock(
                id=1, title="–¢–µ—Å—Ç —É—Ä–æ–∫", is_free=True, price_usd=0.0
            ))
            mock_purchase.check_user_has_lesson = AsyncMock(return_value=False)
            mock_purchase.create_purchase = AsyncMock()
            mock_msg.edit_message_safe = AsyncMock()
            
            from handlers.shop import buy_lesson
            
            call = Mock()
            call.data = "buy:1"
            call.answer = AsyncMock()
            call.from_user = Mock()
            call.from_user.id = 123
            call.message = Mock()
            
            state = Mock()
            
            await buy_lesson(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            mock_purchase.create_purchase.assert_called_once()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫—É–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–∫—É–ø–æ–∫: {e}")
        return False

async def run_final_tests():
    """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–¥–∞—á–∏")
    print("=" * 60)
    
    tests = [
        ("–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫", test_button_functionality),
        ("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫—É–ø–æ–∫", test_purchase_system),
        ("–ö—É—Ä—Å –≤–∞–ª—é—Ç (—Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)", test_currency_rate_real_scenario)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}...")
        try:
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("‚Ä¢ ‚úÖ –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞, —É—Ä–æ–∫–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚Ä¢ ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (UNIQUE constraint)")
        print("‚Ä¢ ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫—É–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚Ä¢ ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware —É–ª—É—á—à–µ–Ω–∞")
        print("‚Ä¢ ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        print("\nüéØ –ì–û–¢–û–í–´–ï –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –§–£–ù–ö–¶–ò–ò:")
        print("‚Ä¢ üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚Ä¢ üìö –ú–æ–∏ —É—Ä–æ–∫–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚Ä¢ üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚Ä¢ üõí –ü–æ–∫—É–ø–∫–∞ —É—Ä–æ–∫–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\n‚úÖ –ó–ê–î–ê–ß–ê –ì–û–¢–û–í–ê –ö –°–î–ê–ß–ï!")
        return True
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}")
        return False

if __name__ == '__main__':
    success = asyncio.run(run_final_tests())
    sys.exit(0 if success else 1)