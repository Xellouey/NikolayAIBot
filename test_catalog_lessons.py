"""
üß™ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤ NikolayAI Bot
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞ —É—Ä–æ–∫–æ–≤, –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import unittest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from decimal import Decimal
from datetime import datetime


class MockLesson:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    
    def __init__(self, lesson_id=1, title="–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫", price_usd=25.00, is_free=False, is_active=True):
        self.id = lesson_id
        self.title = title
        self.description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"
        self.price_usd = Decimal(str(price_usd))
        self.is_free = is_free
        self.is_active = is_active
        self.content_type = "video"
        self.video_file_id = "test_video_id"
        self.category = "–û—Å–Ω–æ–≤—ã"
        self.views_count = 100
        self.purchases_count = 50
        self.created_at = datetime.now()
        self.updated_at = datetime.now()
    
    async def get_all_lessons(self, active_only=True):
        """Mock –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤"""
        lessons = [
            {
                'id': 1,
                'title': '–£—Ä–æ–∫ 1 - –û—Å–Ω–æ–≤—ã',
                'description': '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–∫',
                'price_usd': Decimal('25.00'),
                'is_free': False,
                'is_active': True,
                'category': '–û—Å–Ω–æ–≤—ã'
            },
            {
                'id': 2,
                'title': '–£—Ä–æ–∫ 2 - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
                'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫',
                'price_usd': Decimal('0.00'),
                'is_free': True,
                'is_active': True,
                'category': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ'
            },
            {
                'id': 3,
                'title': '–£—Ä–æ–∫ 3 - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π',
                'description': '–°–∫—Ä—ã—Ç—ã–π —É—Ä–æ–∫',
                'price_usd': Decimal('50.00'),
                'is_free': False,
                'is_active': False,
                'category': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
            }
        ]
        
        if active_only:
            return [lesson for lesson in lessons if lesson['is_active']]
        return lessons
    
    async def get_lesson(self, lesson_id):
        """Mock –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞ –ø–æ ID"""
        lessons = {
            1: MockLesson(1, "–£—Ä–æ–∫ 1 - –û—Å–Ω–æ–≤—ã", 25.00, False, True),
            2: MockLesson(2, "–£—Ä–æ–∫ 2 - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", 0.00, True, True),
            3: MockLesson(3, "–£—Ä–æ–∫ 3 - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π", 50.00, False, False)
        }
        return lessons.get(lesson_id, None)
    
    async def get_free_lessons(self):
        """Mock –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"""
        lessons = await self.get_all_lessons(active_only=True)
        return [lesson for lesson in lessons if lesson['is_free']]


class MockPurchase:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫"""
    
    async def get_user_purchases(self, user_id):
        """Mock –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id == 123456789:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏
            return [
                {
                    'lesson_id': 1,
                    'title': '–£—Ä–æ–∫ 1 - –û—Å–Ω–æ–≤—ã',
                    'price_paid_usd': Decimal('25.00'),
                    'purchase_date': datetime.now()
                }
            ]
        return []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
    
    async def check_user_has_lesson(self, user_id, lesson_id):
        """Mock –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —É—Ä–æ–∫–æ–º"""
        if user_id == 123456789 and lesson_id == 1:
            return True
        return False


class MockCallbackQuery:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è CallbackQuery"""
    
    def __init__(self, data="catalog", user_id=123456789):
        self.data = data
        self.answer = AsyncMock()
        self.message = MagicMock()
        self.message.edit_text = AsyncMock()
        self.from_user = MagicMock()
        self.from_user.id = user_id
        self.from_user.full_name = "Test User"


class MockFSMContext:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è FSMContext"""
    
    def __init__(self):
        self.state = None
        self.data = {}
    
    async def get_state(self):
        return self.state
    
    async def set_state(self, state):
        self.state = state
    
    async def get_data(self):
        return self.data
    
    async def update_data(self, **kwargs):
        self.data.update(kwargs)


class MockUtils:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è —É—Ç–∏–ª–∏—Ç"""
    
    @staticmethod
    def get_text(path, **kwargs):
        """Mock –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        texts = {
            'messages.catalog_title': 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            'admin.messages.no_lessons': 'üìö –£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫!',
            'messages.error_occurred': '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            'messages.welcome': 'üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —É—Ä–æ–∫–æ–≤!',
            'messages.my_lessons_title': 'üìö –í–∞—à–∏ —É—Ä–æ–∫–∏',
            'messages.no_lessons': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.',
            'messages.profile_info': 'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüë§ –ò–º—è: {full_name}\nüìö –£—Ä–æ–∫–æ–≤: {lessons_count}',
            'buttons.back': 'üîô –ù–∞–∑–∞–¥',
            'buttons.catalog': 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤',
            'buttons.buy': 'üí≥ –ö—É–ø–∏—Ç—å'
        }
        text = texts.get(path, path)
        if kwargs:
            try:
                return text.format(**kwargs)
            except KeyError:
                return text
        return text
    
    @staticmethod
    def calculate_stars_price(usd_price, exchange_rate=200):
        """Mock —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –≤ –∑–≤–µ–∑–¥–∞—Ö"""
        if isinstance(usd_price, str):
            usd_price = Decimal(usd_price)
        elif isinstance(usd_price, float):
            usd_price = Decimal(str(usd_price))
        stars_price = int(usd_price * exchange_rate)
        return max(1, stars_price)


class MockKeyboards:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def markup_main_menu():
        return "main_menu_keyboard"
    
    @staticmethod
    def markup_catalog(lessons):
        return f"catalog_keyboard_with_{len(lessons)}_lessons"
    
    @staticmethod
    def markup_my_lessons(lessons):
        return f"my_lessons_keyboard_with_{len(lessons)}_lessons"
    
    @staticmethod
    def markup_lesson_details(lesson_id, user_has_lesson=False, show_promocode=True):
        return f"lesson_details_keyboard_{lesson_id}"


class TestCatalogLessons(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞...")
        self.lesson = MockLesson()
        self.purchase = MockPurchase()
        self.utils = MockUtils()
        self.kb = MockKeyboards()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    async def test_get_all_lessons_active_only(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤...")
        
        lessons = await self.lesson.get_all_lessons(active_only=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏
        self.assertEqual(len(lessons), 2)
        for lesson in lessons:
            self.assertTrue(lesson['is_active'])
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_get_all_lessons_include_inactive(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤...")
        
        lessons = await self.lesson.get_all_lessons(active_only=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏
        self.assertEqual(len(lessons), 3)
        active_count = sum(1 for lesson in lessons if lesson['is_active'])
        self.assertEqual(active_count, 2)
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_get_free_lessons(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤...")
        
        free_lessons = await self.lesson.get_free_lessons()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏
        self.assertEqual(len(free_lessons), 1)
        self.assertTrue(free_lessons[0]['is_free'])
        self.assertTrue(free_lessons[0]['is_active'])
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_show_catalog_with_lessons(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —É—Ä–æ–∫–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —É—Ä–æ–∫–∞–º–∏...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º handler show_catalog
        call = MockCallbackQuery("catalog")
        state = MockFSMContext()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏
        lessons = await self.lesson.get_all_lessons(active_only=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫–∏ –µ—Å—Ç—å
        self.assertGreater(len(lessons), 0)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
        text = self.utils.get_text('messages.catalog_title')
        keyboard = self.kb.markup_catalog(lessons)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.assertIn('–ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤', text)
        self.assertIn('2_lessons', keyboard)
        
        print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —É—Ä–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_show_catalog_empty(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π mock
        empty_lesson = MockLesson()
        empty_lesson.get_all_lessons = AsyncMock(return_value=[])
        
        call = MockCallbackQuery("catalog")
        state = MockFSMContext()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lessons = await empty_lesson.get_all_lessons(active_only=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç
        self.assertEqual(len(lessons), 0)
        
        # –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É—Ä–æ–∫–æ–≤
        text = self.utils.get_text('admin.messages.no_lessons')
        keyboard = self.kb.markup_main_menu()
        
        self.assertIn('–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', text)
        self.assertEqual(keyboard, "main_menu_keyboard")
        
        print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_show_my_lessons_with_purchases(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–∞–º–∏...")
        
        call = MockCallbackQuery("my_lessons", user_id=123456789)
        state = MockFSMContext()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        purchases = await self.purchase.get_user_purchases(call.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∏ –µ—Å—Ç—å
        self.assertGreater(len(purchases), 0)
        self.assertEqual(purchases[0]['lesson_id'], 1)
        self.assertEqual(purchases[0]['title'], '–£—Ä–æ–∫ 1 - –û—Å–Ω–æ–≤—ã')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤
        lessons = []
        for purchase in purchases:
            lesson_data = {
                'id': purchase['lesson_id'],
                'title': purchase['title']
            }
            lessons.append(lesson_data)
        
        keyboard = self.kb.markup_my_lessons(lessons)
        
        self.assertIn('1_lessons', keyboard)
        
        print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_show_my_lessons_no_purchases(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–∫—É–ø–æ–∫"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–∫—É–ø–æ–∫...")
        
        call = MockCallbackQuery("my_lessons", user_id=999999999)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
        state = MockFSMContext()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        purchases = await self.purchase.get_user_purchases(call.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç
        self.assertEqual(len(purchases), 0)
        
        # –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É—Ä–æ–∫–æ–≤
        text = self.utils.get_text('messages.no_lessons')
        keyboard = self.kb.markup_main_menu()
        
        self.assertIn('–Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤', text)
        self.assertEqual(keyboard, "main_menu_keyboard")
        
        print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–∫—É–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_lesson_pricing_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤...")
        
        lessons = await self.lesson.get_all_lessons(active_only=True)
        
        for lesson in lessons:
            price_usd = float(lesson['price_usd'])
            price_stars = self.utils.calculate_stars_price(price_usd)
            
            if lesson['is_free']:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ü–µ–Ω—É 0
                self.assertEqual(price_usd, 0.0)
                self.assertEqual(price_stars, 1)  # –ú–∏–Ω–∏–º—É–º 1 –∑–≤–µ–∑–¥–∞
            else:
                # –ü–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ü–µ–Ω—É –±–æ–ª—å—à–µ 0
                self.assertGreater(price_usd, 0.0)
                self.assertGreater(price_stars, 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –≤ –∑–≤–µ–∑–¥–∞—Ö
                expected_stars = max(1, int(price_usd * 200))
                self.assertEqual(price_stars, expected_stars)
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_user_lesson_ownership(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏...")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏
        user_with_lessons = 123456789
        user_without_lessons = 999999999
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ —É—Ä–æ–∫–æ–º 1
        has_lesson_1 = await self.purchase.check_user_has_lesson(user_with_lessons, 1)
        self.assertTrue(has_lesson_1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è —É—Ä–æ–∫–æ–º 2
        has_lesson_2 = await self.purchase.check_user_has_lesson(user_with_lessons, 2)
        self.assertFalse(has_lesson_2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
        has_any_lesson = await self.purchase.check_user_has_lesson(user_without_lessons, 1)
        self.assertFalse(has_any_lesson)
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_catalog_keyboard_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —É—Ä–æ–∫–∏
        test_lessons = [
            {'id': 1, 'title': '–£—Ä–æ–∫ 1', 'price_usd': Decimal('25.00'), 'is_free': False},
            {'id': 2, 'title': '–£—Ä–æ–∫ 2', 'price_usd': Decimal('0.00'), 'is_free': True}
        ]
        
        keyboard = self.kb.markup_catalog(test_lessons)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—Ä–æ–∫–æ–≤
        self.assertIn('2_lessons', keyboard)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_lesson_button_text_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —É—Ä–æ–∫–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —É—Ä–æ–∫–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫
        free_lesson = {'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫', 'is_free': True, 'price_usd': Decimal('0.00')}
        free_button_text = f"üéÅ {free_lesson['title']} (FREE)"
        self.assertIn('üéÅ', free_button_text)
        self.assertIn('FREE', free_button_text)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫
        paid_lesson = {'title': '–ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫', 'is_free': False, 'price_usd': Decimal('25.00')}
        price_usd = float(paid_lesson['price_usd'])
        paid_button_text = f"üìö {paid_lesson['title']} (${price_usd:.2f})"
        self.assertIn('üìö', paid_button_text)
        self.assertIn('$25.00', paid_button_text)
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —É—Ä–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_catalog_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...")
        
        # –°–æ–∑–¥–∞–µ–º mock —Å –æ—à–∏–±–∫–æ–π
        error_lesson = MockLesson()
        error_lesson.get_all_lessons = AsyncMock(side_effect=Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞"))
        
        call = MockCallbackQuery("catalog")
        state = MockFSMContext()
        
        try:
            lessons = await error_lesson.get_all_lessons(active_only=True)
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞
            self.assertIn("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞", str(e))
            
            # –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_text = self.utils.get_text('messages.error_occurred')
            self.assertIn('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error_text)
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_interface_text_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã
        catalog_title = self.utils.get_text('messages.catalog_title')
        self.assertIn('–ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤', catalog_title)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        profile_text = self.utils.get_text('messages.profile_info', 
                                         full_name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                                         lessons_count=5)
        self.assertIn('–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', profile_text)
        self.assertIn('5', profile_text)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        nonexistent = self.utils.get_text('nonexistent.path')
        self.assertEqual(nonexistent, 'nonexistent.path')
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_async_test(test_func):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(test_func())
    finally:
        loop.close()


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π suite
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_tests = [
        'test_catalog_keyboard_generation',
        'test_lesson_button_text_formatting', 
        'test_interface_text_functionality'
    ]
    
    for test_name in sync_tests:
        suite.addTest(TestCatalogLessons(test_name))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_tests = [
        'test_get_all_lessons_active_only',
        'test_get_all_lessons_include_inactive',
        'test_get_free_lessons',
        'test_show_catalog_with_lessons',
        'test_show_catalog_empty',
        'test_show_my_lessons_with_purchases',
        'test_show_my_lessons_no_purchases',
        'test_lesson_pricing_logic',
        'test_user_lesson_ownership',
        'test_catalog_error_handling'
    ]
    
    print("\n" + "=" * 60)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 60)
    
    test_instance = TestCatalogLessons()
    test_instance.setUp()
    
    async_success = 0
    async_total = len(async_tests)
    
    for test_name in async_tests:
        try:
            print(f"\nüß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
            test_method = getattr(test_instance, test_name)
            run_async_test(test_method)
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            async_success += 1
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    sync_passed = result.testsRun - len(result.failures) - len(result.errors)
    total_passed = sync_passed + async_success
    total_tests = result.testsRun + async_total
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if total_passed == total_tests:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
    print("=" * 60)