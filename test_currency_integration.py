"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –æ—Ç –≤—ã–∑–æ–≤–∞ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
"""

import asyncio
import sys
import logging
from unittest.mock import Mock, AsyncMock, patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.append('.')

async def test_full_currency_flow():
    """–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        from handlers.admin import currency_rate_settings, update_currency_rate
        from states import FSMSettings
        from database.lesson import SystemSettings
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π mock call
        call = Mock()
        call.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        call.answer = AsyncMock()
        call.message = Mock()
        call.message.edit_text = AsyncMock()
        
        state = Mock()
        state.set_state = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('handlers.admin.config.ADMINS', [123456789]), \
             patch('handlers.admin.utils.get_admins', return_value=[]), \
             patch('handlers.admin.s') as mock_system_settings, \
             patch('handlers.admin.utils.get_text') as mock_get_text:
            
            mock_system_settings.get_usd_to_stars_rate = AsyncMock(return_value=200)
            mock_get_text.return_value = "üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç\n\n1 USD = 200 ‚≠ê Stars\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:"
            
            # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞
            await currency_rate_settings(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            call.answer.assert_called_once()
            state.set_state.assert_called_once_with(FSMSettings.currency_rate)
            call.message.edit_text.assert_called_once()
            
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞...")
        
        message = Mock()
        message.text = "77"
        message.answer = AsyncMock()
        
        state = Mock()
        state.clear = AsyncMock()
        
        with patch('handlers.admin.s') as mock_system_settings, \
             patch('handlers.admin.utils.get_text') as mock_get_text, \
             patch('handlers.admin.kb') as mock_kb:
            
            mock_system_settings.set_usd_to_stars_rate = AsyncMock()
            mock_get_text.return_value = "‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!"
            mock_kb.markup_remove.return_value = Mock()
            mock_kb.markup_admin_settings.return_value = Mock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            await update_currency_rate(message, state)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            mock_system_settings.set_usd_to_stars_rate.assert_called_once_with(77)
            assert message.answer.call_count == 2
            state.clear.assert_called_once()
            
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_database_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î...")
    
    try:
        from database.lesson import SystemSettings
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SystemSettings
        s = SystemSettings()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–æ–∫–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with patch.object(s, 'set_setting') as mock_set_setting, \
             patch.object(s, 'get_setting') as mock_get_setting:
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
            mock_get_setting.return_value = "200"
            mock_set_setting.return_value = None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            rate = await s.get_usd_to_stars_rate()
            assert rate == 200
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫—É—Ä—Å–∞
            await s.set_usd_to_stars_rate(77)
            mock_set_setting.assert_called_once_with('usd_to_stars_rate', '77')
            
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        from handlers.admin import update_currency_rate
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–≤–æ–¥–æ–º
        message = Mock()
        message.text = "abc"
        message.answer = AsyncMock()
        
        state = Mock()
        state.clear = AsyncMock()
        
        with patch('handlers.admin.kb') as mock_kb:
            mock_kb.markup_cancel.return_value = Mock()
            
            await update_currency_rate(message, state)
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ" in call_args
        
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        message.text = "0"
        message.answer.reset_mock()
        
        await update_currency_rate(message, state)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        assert "–±–æ–ª—å—à–µ 0" in call_args
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

async def test_real_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î...")
    
    try:
        from database.lesson import SystemSettings
        from database.core import con
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if con.is_closed():
            con.connect()
        
        s = SystemSettings()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        try:
            current_rate = await s.get_usd_to_stars_rate()
            print(f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤ –ë–î: {current_rate}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
            original_rate = current_rate
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å
            test_rate = 999
            await s.set_usd_to_stars_rate(test_rate)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            new_rate = await s.get_usd_to_stars_rate()
            assert new_rate == test_rate, f"–û–∂–∏–¥–∞–ª—Å—è –∫—É—Ä—Å {test_rate}, –ø–æ–ª—É—á–µ–Ω {new_rate}"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
            await s.set_usd_to_stars_rate(original_rate)
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as db_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {db_error}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

async def test_state_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...")
    
    try:
        from states import FSMSettings
        from aiogram.fsm.context import FSMContext
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        assert hasattr(FSMSettings, 'currency_rate'), "–°–æ—Å—Ç–æ—è–Ω–∏–µ currency_rate –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = Mock(spec=FSMContext)
        state.set_state = AsyncMock()
        state.clear = AsyncMock()
        state.get_data = AsyncMock(return_value={})
        state.update_data = AsyncMock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.set_state(FSMSettings.currency_rate)
        state.set_state.assert_called_once_with(FSMSettings.currency_rate)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
        state.clear.assert_called_once()
        
        print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False

async def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...")
    print("=" * 60)
    
    tests = [
        test_state_management,
        test_database_operations,
        test_error_handling,
        test_full_currency_flow,
        test_real_database_connection
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if await test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            print()
    
    print("=" * 60)
    print(f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total}")
    
    if passed == total:
        print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\nüîß –°–∏—Å—Ç–µ–º–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:")
        print("‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚Ä¢ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏—Å–ø—Ä–∞–≤–µ–Ω")
        print("‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
        return True
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")
        print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}")
        return False

if __name__ == '__main__':
    success = asyncio.run(run_integration_tests())
    sys.exit(0 if success else 1)