import asyncio
from database.lesson import Lesson
from database.lead_magnet import LeadMagnet
import keyboards as kb
from localization import get_text

async def test_full_flow():
    """Test full flow from main menu to catalog"""
    print("=== –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–ò ===\n")
    
    # 1. Test main menu
    print("1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
    main_menu = kb.markup_main_menu('ru')
    print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∞")
    for row in main_menu.inline_keyboard:
        for button in row:
            print(f"      - {button.text} -> {button.callback_data}")
    
    # 2. Test catalog
    print("\n2. –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤:")
    l = Lesson()
    lessons = await l.get_all_lessons(active_only=True)
    print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: {len(lessons)}")
    
    paid_lessons = [lesson for lesson in lessons if not lesson.get('is_free', False)]
    print(f"   –ü–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: {len(paid_lessons)}")
    
    if paid_lessons:
        catalog_markup = await kb.markup_catalog(paid_lessons)
        print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∞")
        for row in catalog_markup.inline_keyboard:
            for button in row:
                print(f"      - {button.text} -> {button.callback_data}")
    else:
        print(f"   ‚ö†Ô∏è –ù–µ—Ç –ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ: {get_text('admin.no_lessons')}")
    
    # 3. Test my lessons
    print("\n3. –ú–æ–∏ —É—Ä–æ–∫–∏:")
    my_lessons = []
    
    # Check lead magnet
    if await LeadMagnet.is_ready():
        lead_label = await LeadMagnet.get_text_for_locale('lessons_label', 'ru')
        my_lessons.append({
            'id': 'lead_magnet',
            'title': lead_label or '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫',
            'is_lead': True
        })
        print(f"   ‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {lead_label or '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫'}")
    else:
        print(f"   ‚ÑπÔ∏è –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if my_lessons:
        my_lessons_markup = kb.markup_my_lessons(my_lessons)
        print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '–ú–æ–∏ —É—Ä–æ–∫–∏' —Å–æ–∑–¥–∞–Ω–∞")
        for row in my_lessons_markup.inline_keyboard:
            for button in row:
                print(f"      - {button.text} -> {button.callback_data}")
    else:
        print(f"   ‚ö†Ô∏è –ù–µ—Ç —É—Ä–æ–∫–æ–≤ - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ: {get_text('no_lessons')}")
    
    # 4. Test support menu
    print("\n4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞:")
    from keyboards import markup_support_menu
    support_markup = markup_support_menu()
    print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω–∞")
    for row in support_markup.inline_keyboard:
        for button in row:
            print(f"      - {button.text} -> {button.callback_data}")
    
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
    print("\nüìå –†–ï–ó–Æ–ú–ï:")
    if paid_lessons:
        print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É—Ä–æ–∫–æ–≤")
    
    if await LeadMagnet.is_ready():
        print("‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ÑπÔ∏è –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_full_flow())
