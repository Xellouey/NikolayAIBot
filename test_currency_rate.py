import sys
sys.stdout.reconfigure(encoding='utf-8')
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
"""
import asyncio
import sys
from unittest.mock import Mock, AsyncMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.append('.')

async def test_currency_rate_update():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...")
    
    try:
        with patch('handlers.admin.s') as mock_system_settings, \
             patch('handlers.admin.utils') as mock_utils, \
             patch('handlers.admin.kb') as mock_kb:
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
            mock_system_settings.set_usd_to_stars_rate = AsyncMock()
            mock_utils.get_text = Mock(return_value="‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
            mock_kb.markup_remove = Mock(return_value=Mock())
            mock_kb.markup_admin_settings = Mock(return_value=Mock())
            mock_kb.markup_cancel = Mock(return_value=Mock())
            
            from handlers.admin import update_currency_rate
            from states import FSMSettings
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ message
            message = Mock()
            message.text = "77"
            message.answer = AsyncMock()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ state
            state = Mock()
            state.clear = AsyncMock()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await update_currency_rate(message, state)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            mock_system_settings.set_usd_to_stars_rate.assert_called_once_with(77)
            assert message.answer.call_count == 2  # 2 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            state.clear.assert_called_once()
            
            print("‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_currency_rate_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...")
    
    try:
        with patch('handlers.admin.s') as mock_system_settings, \
             patch('handlers.admin.kb') as mock_kb:
            
            mock_kb.markup_cancel = Mock(return_value=Mock())
            
            from handlers.admin import update_currency_rate
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            message = Mock()
            message.text = "abc"  # –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            message.answer = AsyncMock()
            
            state = Mock()
            state.clear = AsyncMock()
            
            await update_currency_rate(message, state)
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ" in call_args
            
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

async def test_currency_rate_zero_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω—É–ª–µ–≤–æ–≥–æ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω—É–ª–µ–≤–æ–≥–æ –∫—É—Ä—Å–∞...")
    
    try:
        with patch('handlers.admin.kb') as mock_kb:
            
            mock_kb.markup_cancel = Mock(return_value=Mock())
            
            from handlers.admin import update_currency_rate
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            message = Mock()
            message.text = "0"  # –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0)
            message.answer = AsyncMock()
            
            state = Mock()
            state.clear = AsyncMock()
            
            await update_currency_rate(message, state)
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "–±–æ–ª—å—à–µ 0" in call_args
            
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω—É–ª–µ–≤–æ–≥–æ –∫—É—Ä—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω—É–ª—è: {e}")
        return False

async def test_stars_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã –≤ –∑–≤—ë–∑–¥–∞—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã –≤ –∑–≤—ë–∑–¥–∞—Ö...")
    
    try:
        from utils import calculate_stars_price
        from database.lesson import SystemSettings
        import unittest.mock as mock
        
        # Mock SystemSettings –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—É—Ä—Å–∞ 77
        with mock.patch.object(SystemSettings, 'get_usd_to_stars_rate', return_value=77):
            s = SystemSettings()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è $25
            stars = await calculate_stars_price(25)
            assert stars == 1925, f"–û–∂–∏–¥–∞–ª–æ—Å—å 1925, –ø–æ–ª—É—á–µ–Ω–æ {stars}"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è $0 (–º–∏–Ω–∏–º—É–º 1)
            stars_min = await calculate_stars_price(0)
            assert stars_min == 1
            
            print("‚úÖ –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –≤ –∑–≤—ë–∑–¥–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∞—Å—á—ë—Ç–∞: {e}")
        return False

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫
tests = [
    test_currency_rate_update,
    test_currency_rate_validation,
    test_currency_rate_zero_validation,
    test_stars_calculation
]
async def run_currency_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...")
    print("=" * 50)
    
    tests = [
        test_currency_rate_update,
        test_currency_rate_validation,
        test_currency_rate_zero_validation,
        test_stars_calculation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if await test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            print()
    
    print("=" * 50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSMSettings -> FSMContext)")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        print("\nüéØ –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç:")
        print("‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å –∫—É—Ä—Å USD –∫ Stars")
        print("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
        print("‚Ä¢ –í–∏–¥–µ—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return True
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
        return False

if __name__ == '__main__':
    success = asyncio.run(run_currency_tests())
    sys.exit(0 if success else 1)