from typing import Tuple, Dict, Any, List
from localization import get_text
import keyboards as kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import lesson
from database.lead_magnet import LeadMagnet

# –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç —ç–∫—Ä–∞–Ω—ã (—Å—Ü–µ–Ω—ã)
# –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º. –í –Ω–∏—Ö –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ,
# —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤–∏–¥–µ–ª —Ä–µ–∞–ª—å–Ω—ã–π –≤–∏–¥ —ç–∫—Ä–∞–Ω–∞: —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.

l = lesson.Lesson()
p = lesson.Purchase()


async def build_scene(scene: str, user_id: int = 0, lang: str = 'ru') -> Tuple[str, Any]:
    """
    –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, reply_markup)
    """
    scene = scene.lower()

    if scene == 'main':
        text = get_text('welcome', lang)
        markup = kb.markup_main_menu(lang)
        return text, markup

    if scene == 'catalog':
        # –ó–∞–≥–æ—Ç–æ–≤–∏–º 2 –ø—Ä–∏–º–µ—Ä–∞ —É—Ä–æ–∫–æ–≤
        lessons = [
            {'id': 101, 'title': 'Midjourney: –æ—Å–Ω–æ–≤—ã', 'price_usd': 19.99, 'is_free': False},
            {'id': 102, 'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫', 'price_usd': 0, 'is_free': True},
        ]
        text = get_text('catalog_title', lang)
        markup = await kb.markup_catalog(lessons)
        return text, markup

    if scene == 'lesson_card':
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–∫–∞ (–ø—Ä–∏–º–µ—Ä, –±–µ–∑ —É—á—ë—Ç–∞ –ø–æ–∫—É–ø–∫–∏)
        sample_lesson = {'id': 301, 'title': 'Stable Diffusion PRO', 'description': '–ì–ª—É–±–æ–∫–∏–π –∫—É—Ä—Å –ø–æ SD', 'price_usd': 29.0}
        from localization import get_text as t
        text = t('messages.lesson_details', 'ru', title=sample_lesson['title'], price_usd=f"{sample_lesson['price_usd']:.2f}", price_stars='2900', description=sample_lesson['description']) if hasattr(t, '__call__') else '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–∫–∞'
        markup = kb.markup_lesson_details(sample_lesson['id'], user_has_lesson=False, show_promocode=True, is_free=False, has_preview=True, lang=lang)
        return text, markup

    if scene == 'payment':
        # –≠–∫—Ä–∞–Ω –æ–ø–ª–∞—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—Ä–æ–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã/–ø—Ä–æ–º–æ–∫–æ–¥–∞
        sample_lesson = {'id': 401, 'title': 'AI –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥', 'description': '–ù–∞—É—á–∏—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å —Å AI', 'price_usd': 25.0}
        from localization import get_text as t
        text = t('messages.lesson_details', 'ru', title=sample_lesson['title'], price_usd=f"{sample_lesson['price_usd']:.2f}", price_stars='2500', description=sample_lesson['description']) if hasattr(t, '__call__') else '–û–ø–ª–∞—Ç–∞'
        markup = kb.markup_lesson_details(sample_lesson['id'], user_has_lesson=False, show_promocode=True, is_free=False, has_preview=False, lang=lang)
        return text, markup

    if scene == 'my_lessons':
        lessons = []
        # –õ–∏–¥-–º–∞–≥–Ω–∏—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if await LeadMagnet.is_ready():
            lead_label = await LeadMagnet.get_text_for_locale('lessons_label', lang)
            lessons.append({
                'id': 'lead_magnet',
                'title': lead_label or '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫',
                'is_lead': True
            })
        # –ü—Ä–∏–º–µ—Ä –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
        lessons.append({'id': 201, 'title': 'ChatGPT –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', 'is_lead': False})
        text = get_text('my_lessons_title', lang)
        markup = kb.markup_my_lessons(lessons)
        return text, markup

    if scene == 'support':
        text = get_text('support_welcome', lang)
        markup = kb.markup_support_menu()
        return text, markup

    # Fallback
    return '‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', kb.markup_main_menu(lang)


async def build_scene_preview(scene: str, lang: str = 'ru') -> Tuple[str, InlineKeyboardMarkup]:
    """
    –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º.
    –ö–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–µ–¥—É—Ç –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π.
    """
    scene = scene.lower()

    def back_row():
        return [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='scene_preview')]

    if scene == 'main':
        text = get_text('welcome', lang)
        items = [
            [InlineKeyboardButton(text=get_text('btn_catalog', lang), callback_data='scene_edit_key:main:buttons:btn_catalog')],
            [InlineKeyboardButton(text=get_text('btn_my_lessons', lang), callback_data='scene_edit_key:main:buttons:btn_my_lessons')],
            [InlineKeyboardButton(text=get_text('btn_support', lang), callback_data='scene_edit_key:main:buttons:btn_support')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —ç–∫—Ä–∞–Ω–∞', callback_data='scene_edit_message:main:messages.welcome')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'profile':
        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = get_text('profile_info', lang, full_name='–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', lessons_count=3)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è', callback_data='scene_edit_message:profile:messages.profile_info')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'catalog':
        text = get_text('catalog_title', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —ç–∫—Ä–∞–Ω–∞', callback_data='scene_edit_message:catalog:messages.catalog_title')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥', callback_data='scene_edit_key:catalog:buttons:btn_back')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'my_lessons':
        text = get_text('my_lessons_title', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —ç–∫—Ä–∞–Ω–∞', callback_data='scene_edit_message:my_lessons:messages.my_lessons_title')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥', callback_data='scene_edit_key:my_lessons:buttons:btn_back')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'support':
        text = get_text('support_welcome', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —ç–∫—Ä–∞–Ω–∞', callback_data='scene_edit_message:support:messages.support_welcome')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥', callback_data='scene_edit_key:support:buttons:btn_back')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'support_subject':
        text = get_text('ticket_subject_prompt', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–µ–º—ã', callback_data='scene_edit_message:support_subject:messages.ticket_subject_prompt')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'support_description':
        text = get_text('ticket_description_prompt', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è', callback_data='scene_edit_message:support_description:messages.ticket_description_prompt')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'support_my_tickets':
        text = get_text('no_tickets', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "–Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤"', callback_data='scene_edit_message:support_my_tickets:messages.no_tickets')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'support_ticket_details':
        text = get_text('ticket_details', lang, ticket_id=123, subject='–ü—Ä–∏–º–µ—Ä —Ç–µ–º—ã', status='üü¢ –û—Ç–∫—Ä—ã—Ç', created_at='2025-01-01', description='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞...')
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞', callback_data='scene_edit_message:support_ticket_details:messages.ticket_details')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'payment':
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–º–æ–∫–æ–¥
        from localization import get_text as t
        text = t('messages.lesson_details', 'ru', title='–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞', price_usd='25.00', price_stars='2500', description='–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞')
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏', callback_data='scene_edit_message:payment:messages.lesson_details')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å', callback_data='scene_edit_key:payment:buttons:btn_buy')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='scene_edit_key:payment:buttons:enter_promocode')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    if scene == 'promocode':
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        text = get_text('enter_promocode', lang)
        items = [
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"', callback_data='scene_edit_message:promocode:messages.enter_promocode')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"', callback_data='scene_edit_message:promocode:messages.promocode_invalid')],
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω"', callback_data='scene_edit_message:promocode:messages.promocode_applied')],
            back_row()
        ]
        return text, InlineKeyboardMarkup(inline_keyboard=items)

    # Fallback
    return '‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', InlineKeyboardMarkup(inline_keyboard=[back_row()])


# –ú—ç–ø–ø–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π –Ω–∞ —Å—Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥–º–∏–Ω–∞–º
KEY_USAGE: Dict[str, List[str]] = {
    # –ö–Ω–æ–ø–∫–∏
    'btn_catalog': ['main'],
    'btn_my_lessons': ['main'],
    'btn_support': ['main'],
    'btn_back': ['catalog', 'my_lessons', 'support'],
    'btn_buy': ['lesson_card', 'payment'],
    'btn_enter_promocode': ['payment'],

    # –°–æ–æ–±—â–µ–Ω–∏—è
    'welcome': ['main'],
    'catalog_title': ['catalog'],
    'my_lessons_title': ['my_lessons'],
    'profile_info': ['profile'],
    'support_welcome': ['support'],
    'ticket_subject_prompt': ['support_subject'],
    'ticket_description_prompt': ['support_description'],
    'no_tickets': ['support_my_tickets'],
    'ticket_details': ['support_ticket_details'],
    'lesson_details': ['lesson_card', 'payment'],
    'enter_promocode': ['promocode', 'payment'],
    'promocode_invalid': ['promocode'],
    'promocode_applied': ['promocode'],
}


def get_key_usage_scenes(key: str) -> List[str]:
    return KEY_USAGE.get(key, [])
