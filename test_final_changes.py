#!/usr/bin/env python3
"""Final test of all changes"""
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import asyncio
from localization import get_text
from database import lesson

async def test_changes():
    """Test all recent changes"""
    print("=" * 60)
    print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("=" * 60)
    
    # 1. Test welcome message updated
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ welcome:")
    welcome_msg = get_text('welcome')
    print(f"   welcome: {welcome_msg[:50]}...")
    assert welcome_msg, "welcome –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    assert "–º–∞–≥–∞–∑–∏–Ω" not in welcome_msg.lower(), "welcome –ù–ï –¥–æ–ª–∂–µ–Ω —É–ø–æ–º–∏–Ω–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω"
    print("   ‚úÖ –ö–ª—é—á welcome –æ–±–Ω–æ–≤–ª–µ–Ω (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞)")
    
    # 2. Test catalog filtering
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    l = lesson.Lesson()
    all_lessons = await l.get_all_lessons(active_only=True)
    print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: {len(all_lessons)}")
    
    # Simulate catalog filtering
    catalog_lessons = [les for les in all_lessons if not les.get('is_free', False)]
    print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ): {len(catalog_lessons)}")
    
    free_count = len([les for les in all_lessons if les.get('is_free', False)])
    print(f"   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–æ: {free_count}")
    
    # Check that free lessons are not in catalog
    for les in catalog_lessons:
        assert not les.get('is_free', False), f"–£—Ä–æ–∫ {les.get('title')} –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º!"
    
    print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã")
    
    # 3. Summary
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 60)
    print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞")
    print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏")
    print(f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞: {free_count}")
    print("\nüéâ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    try:
        asyncio.run(test_changes())
    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
