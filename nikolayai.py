import asyncio
import config
import logging
import json
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from handlers import client, admin, mail, shop, payment, support
from database import sql
from database.mail import Mail
from mail import mailing

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
from errors import global_error_handler, ErrorContext, ErrorType, ErrorSeverity
from message_manager import global_message_manager
from state_manager import safe_state_manager
from database_resilience import init_resilient_db_manager, resilient_db_manager
from database.core import con

import utils

bot = Bot(token=config.TOKEN, default=DefaultBotProperties(parse_mode='html'))

global_message_manager.set_bot(bot)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ aiogram
async def global_exception_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è aiogram 3"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ErrorEvent
        update = event.update
        exception = event.exception
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ update
        context = ErrorContext()
        
        if hasattr(update, 'message') and update.message:
            context.user_id = update.message.from_user.id if update.message.from_user else None
            context.chat_id = update.message.chat.id
            context.message_id = update.message.message_id
        elif hasattr(update, 'callback_query') and update.callback_query:
            context.user_id = update.callback_query.from_user.id if update.callback_query.from_user else None
            context.callback_data = update.callback_query.data
            if update.callback_query.message:
                context.chat_id = update.callback_query.message.chat.id
                context.message_id = update.callback_query.message.message_id
        
        context.handler = "global_exception_handler"
        context.additional_data = {
            "update_type": type(update).__name__,
            "exception_type": type(exception).__name__
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_type, severity = global_error_handler.classify_error(exception)
        global_error_handler.logger.log_error(exception, context, error_type, severity)
        
        print(f"üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {context.handler}: {exception}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if context.user_id:
            try:
                await global_message_manager.send_message_safe(
                    chat_id=context.user_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            except Exception as send_error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É update'–æ–≤
        
    except Exception as handler_error:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {handler_error}")
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {handler_error}")
        return True


async def mail_scheduler():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –∞—Ç–æ–º–∞—Ä–Ω—ã–º –∑–∞—Ö–≤–∞—Ç–æ–º"""
    m = Mail()
    check_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–∞–¥–∞—á
    
    while True:
        try:
            # –ö–∞–∂–¥—ã–µ 30 –∏—Ç–µ—Ä–∞—Ü–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç) –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –∑–∞–¥–∞—á–∏
            check_counter += 1
            if check_counter >= 30:
                check_counter = 0
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –∑–∞–¥–∞—á–∏ (–≤ —Å—Ç–∞—Ç—É—Å–µ 'run' –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç)
                stuck_count = await m.reset_stuck_mails(minutes=30)
                if stuck_count > 0:
                    logging.warning(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stuck_count} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            wait_mails = await m.get_wait_mails()
            
            for mail_data in wait_mails:
                if not isinstance(mail_data, dict):
                    logging.warning(f"Skipping non-dict mail_data: {type(mail_data)}")
                    continue
                
                mail_id = mail_data['id']
                
                # –í–ê–ñ–ù–û: –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É, –∏–∑–º–µ–Ω—è—è —Å—Ç–∞—Ç—É—Å –Ω–∞ 'run'
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
                await m.update_mail(mail_id, 'status', 'run')
                logging.info(f"üîí –ó–∞—Ö–≤–∞—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ ID {mail_id}")
                
                try:
                    message_id = mail_data['message_id']
                    from_id = mail_data['from_id']
                    keyboard_str = mail_data.get('keyboard')
                    keyboard = json.loads(keyboard_str) if keyboard_str else None
                    
                    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mail_id}")
                    await mailing(message_id, from_id, keyboard)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'sent' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ mailing —É—Å–ø–µ—à–µ–Ω
                    await m.update_mail(mail_id, 'status', 'sent')
                    logging.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ID {mail_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    
                except Exception as mail_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mail_id}: {mail_error}")
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'error'
                    try:
                        await m.update_mail(mail_id, 'status', 'error')
                    except Exception as update_error:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –¥–ª—è ID {mail_id}: {update_error}")
                        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ scheduler —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
        encoding='utf-8'
    )
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ NikolayAI...")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config.TOKEN[:10]}...")
    print(f"ID —á–∞—Ç–∞: {config.CHAT_ID}")
    print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(set(config.ADMINS + utils.get_admins()))}")
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    print("–†–µ–∑–∏–ª–∏–µ–Ω—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print("–°–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    print("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    print("–£–¥–∞–ª–µ–Ω–∏–µ webhook –∏ –∑–∞–ø—É—Å–∫ polling...")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
    print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
    print("-" * 50)
    
    try:
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.errors.register(global_exception_handler)
        print("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        dp.chat_join_request.filter(F.chat.id == config.CHAT_ID) # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        
        print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        dp.include_router(payment.payment_router)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–µ—Ä–≤—ã–º–∏
        dp.include_router(support.router)          # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        dp.include_router(client.router)           # ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ü–ï–†–í–´–ú–ò - –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ /start
        dp.include_router(admin.router)            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∞
        dp.include_router(mail.router)             # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        dp.include_router(shop.shop_router)        # ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –ü–û–°–õ–ï–î–ù–ò–ú–ò - —Ç–æ–ª—å–∫–æ callback'–∏
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫ scheduler —Ä–∞—Å—Å—ã–ª–æ–∫
        scheduler_task = asyncio.create_task(mail_scheduler())
        
        print("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ webhook –∏ –∑–∞–ø—É—Å–∫ polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
        print("-" * 50)
        
        await dp.start_polling(bot)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await scheduler_task
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise


if __name__ == '__main__':
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        sql.configure_database()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
