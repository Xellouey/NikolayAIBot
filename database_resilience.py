"""
Database Resilience - —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–∏–ª–∏–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç retry –ª–æ–≥–∏–∫—É, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–±–æ–µ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ graceful degradation
"""

import asyncio
import logging
from typing import Any, Callable, Optional, Dict, List
from datetime import datetime, timedelta
from contextlib import asynccontextmanager

import peewee
from peewee import OperationalError, InterfaceError, DatabaseError

from errors import global_error_handler, ErrorContext, ErrorType, ErrorSeverity


class DatabaseConnectionError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    pass


class DatabaseOperationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    pass


class DatabaseHealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, database_connection):
        self.db = database_connection
        self.last_check = None
        self.is_healthy = True
        self.check_interval = timedelta(minutes=5)
        self.logger = logging.getLogger(__name__)
    
    async def check_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.db.execute_sql("SELECT 1")
            self.is_healthy = True
            self.last_check = datetime.now()
            self.logger.debug("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            return True
            
        except Exception as e:
            self.is_healthy = False
            self.last_check = datetime.now()
            self.logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return False
    
    def should_check_health(self) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î"""
        if self.last_check is None:
            return True
        return datetime.now() - self.last_check > self.check_interval
    
    async def ensure_healthy(self) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞"""
        if self.should_check_health():
            return await self.check_health()
        return self.is_healthy


class ConnectionPool:
    """–ü—Ä–æ—Å—Ç–æ–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, database_connection, pool_size: int = 5):
        self.db = database_connection
        self.pool_size = pool_size
        self.active_connections = 0
        self.max_retries = 3
        self.logger = logging.getLogger(__name__)
    
    @asynccontextmanager
    async def get_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞"""
        if self.active_connections >= self.pool_size:
            # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await asyncio.sleep(0.1)
        
        self.active_connections += 1
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.db.is_closed():
                self.db.connect()
            yield self.db
        finally:
            self.active_connections -= 1


class ResilientDatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–∏–ª–∏–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, database_connection):
        self.db = database_connection
        self.health_checker = DatabaseHealthChecker(database_connection)
        self.connection_pool = ConnectionPool(database_connection)
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry
        self.max_retries = 3
        self.base_delay = 1.0
        self.max_delay = 30.0
        self.backoff_factor = 2.0
        
        # Cache –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.emergency_cache = {}
        self.cache_ttl = timedelta(minutes=10)
        
    async def execute_with_retry(self, 
                               operation: Callable,
                               operation_name: str = "database_operation",
                               context: Optional[Dict[str, Any]] = None,
                               *args, **kwargs) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            operation: –§—É–Ω–∫—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Raises:
            DatabaseOperationError: –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        """
        last_error = None
        
        for attempt in range(self.max_retries):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
                if not await self.health_checker.ensure_healthy():
                    if attempt == 0:
                        self.logger.warning(f"üîÑ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {operation_name}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                async with self.connection_pool.get_connection() as conn:
                    result = await operation(*args, **kwargs)
                    
                    self.logger.debug(f"‚úÖ {operation_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    return result
                    
            except (OperationalError, InterfaceError, DatabaseError) as e:
                last_error = e
                error_str = str(e)
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if any(keyword in error_str.lower() for keyword in ['connection', 'connect', 'network']):
                    error_type = ErrorType.DATABASE
                    severity = ErrorSeverity.HIGH
                    is_retryable = True
                elif any(keyword in error_str.lower() for keyword in ['timeout', 'deadlock']):
                    error_type = ErrorType.DATABASE
                    severity = ErrorSeverity.MEDIUM
                    is_retryable = True
                elif any(keyword in error_str.lower() for keyword in ['constraint', 'duplicate']):
                    error_type = ErrorType.DATABASE
                    severity = ErrorSeverity.MEDIUM
                    is_retryable = False
                else:
                    error_type = ErrorType.DATABASE
                    severity = ErrorSeverity.HIGH
                    is_retryable = True
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                error_context = ErrorContext(
                    handler=operation_name,
                    additional_data={
                        "attempt": attempt + 1,
                        "max_retries": self.max_retries,
                        "context": context or {},
                        "error_details": error_str
                    }
                )
                
                global_error_handler.logger.log_error(e, error_context, error_type, severity)
                
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç retry –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                if not is_retryable or attempt == self.max_retries - 1:
                    break
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry
                delay = min(
                    self.base_delay * (self.backoff_factor ** attempt),
                    self.max_delay
                )
                
                self.logger.warning(
                    f"üîÑ {operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}), "
                    f"–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫: {error_str}"
                )
                
                await asyncio.sleep(delay)
                
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                try:
                    if self.db.is_closed():
                        self.db.connect()
                except Exception as reconnect_error:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {reconnect_error}")
            
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                last_error = e
                error_context = ErrorContext(
                    handler=operation_name,
                    additional_data={
                        "attempt": attempt + 1,
                        "unexpected_error": True,
                        "context": context or {}
                    }
                )
                
                global_error_handler.logger.log_error(
                    e, error_context, ErrorType.UNKNOWN, ErrorSeverity.CRITICAL
                )
                break
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        raise DatabaseOperationError(
            f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫. "
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
        )
    
    async def get_from_cache_or_db(self,
                                 cache_key: str,
                                 db_operation: Callable,
                                 operation_name: str = "cached_operation",
                                 *args, **kwargs) -> Any:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        
        Args:
            cache_key: –ö–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            db_operation: –û–ø–µ—Ä–∞—Ü–∏—è —Å –ë–î
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–ª–∏ –∫—ç—à–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_data = self.get_from_cache(cache_key)
        if cached_data is not None:
            self.logger.debug(f"üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {cache_key}")
            return cached_data
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            result = await self.execute_with_retry(
                db_operation, 
                operation_name,
                {"cache_key": cache_key},
                *args, **kwargs
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.save_to_cache(cache_key, result)
            return result
            
        except DatabaseOperationError:
            # –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
            expired_data = self.get_from_cache(cache_key, ignore_ttl=True)
            if expired_data is not None:
                self.logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞: {cache_key}")
                return expired_data
            
            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ
            self.logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ {cache_key} –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ –∫—ç—à–µ")
            raise
    
    def get_from_cache(self, key: str, ignore_ttl: bool = False) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        if key not in self.emergency_cache:
            return None
        
        cached_item = self.emergency_cache[key]
        
        if not ignore_ttl:
            if datetime.now() - cached_item['timestamp'] > self.cache_ttl:
                # –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏
                return None
        
        return cached_item['data']
    
    def save_to_cache(self, key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        self.emergency_cache[key] = {
            'data': data,
            'timestamp': datetime.now()
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.emergency_cache) > 1000:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            sorted_items = sorted(
                self.emergency_cache.items(),
                key=lambda x: x[1]['timestamp']
            )
            
            for old_key, _ in sorted_items[:100]:  # –£–¥–∞–ª—è–µ–º 100 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
                del self.emergency_cache[old_key]
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self.emergency_cache.clear()
        self.logger.info("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")
    
    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        start_time = datetime.now()
        
        try:
            await self.health_checker.check_health()
            response_time = (datetime.now() - start_time).total_seconds()
            
            return {
                "status": "healthy" if self.health_checker.is_healthy else "unhealthy",
                "response_time_ms": round(response_time * 1000, 2),
                "active_connections": self.connection_pool.active_connections,
                "cache_size": len(self.emergency_cache),
                "last_check": self.health_checker.last_check.isoformat() if self.health_checker.last_check else None
            }
            
        except Exception as e:
            response_time = (datetime.now() - start_time).total_seconds()
            
            return {
                "status": "error",
                "error": str(e),
                "response_time_ms": round(response_time * 1000, 2),
                "active_connections": self.connection_pool.active_connections,
                "cache_size": len(self.emergency_cache)
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ nikolayai.py)
resilient_db_manager: Optional[ResilientDatabaseManager] = None


def init_resilient_db_manager(database_connection):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î"""
    global resilient_db_manager
    resilient_db_manager = ResilientDatabaseManager(database_connection)
    logging.info("‚úÖ –†–µ–∑–∏–ª–∏–µ–Ω—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def resilient_db_operation(operation_name: str = None, use_cache: bool = False, cache_key: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∏–ª–∏–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –ë–î
    
    Args:
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        cache_key: –ö–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    """
    def decorator(func):
        async def wrapper(*args, **kwargs):
            if resilient_db_manager is None:
                # Fallback –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                return await func(*args, **kwargs)
            
            op_name = operation_name or func.__name__
            
            if use_cache:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                cache_key_final = cache_key or f"{func.__name__}_{hash(str(args) + str(kwargs))}"
                
                return await resilient_db_manager.get_from_cache_or_db(
                    cache_key_final, func, op_name, *args, **kwargs
                )
            else:
                return await resilient_db_manager.execute_with_retry(
                    func, op_name, None, *args, **kwargs
                )
        
        return wrapper
    return decorator