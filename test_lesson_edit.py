"""
üß™ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ NikolayAI Bot
"""

import unittest
import asyncio
from unittest.mock import AsyncMock, MagicMock
from decimal import Decimal
from datetime import datetime


class MockLesson:
    """Mock-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    
    def __init__(self):
        self.id = 1
        self.title = "–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"
        self.description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"
        self.price_usd = Decimal("25.00")
        self.is_active = True
        self.is_free = False
        self.content_type = "video"
        self.video_file_id = "test_video_id"
        self.created_at = datetime.now()
        self.updated_at = datetime.now()
    
    async def get_lesson(self, lesson_id):
        if lesson_id == 1:
            return self
        return None
    
    async def update_lesson(self, lesson_id, **kwargs):
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
        self.updated_at = datetime.now()
    
    async def delete_lesson(self, lesson_id):
        self.is_active = False
        self.updated_at = datetime.now()
    
    async def increment_views(self, lesson_id):
        if not hasattr(self, 'views_count'):
            self.views_count = 0
        self.views_count += 1
    
    async def increment_purchases(self, lesson_id):
        if not hasattr(self, 'purchases_count'):
            self.purchases_count = 0
        self.purchases_count += 1


class MockCallbackQuery:
    def __init__(self, data="test_data"):
        self.data = data
        self.answer = AsyncMock()
        self.message = MagicMock()
        self.from_user = MagicMock()


class MockFSMContext:
    def __init__(self):
        self.state = None
    
    async def get_state(self):
        return self.state


class TestLessonEdit(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤"""
    
    def setUp(self):
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        self.lesson = MockLesson()
        self.test_lesson_id = 1
        self.test_user_id = 123456789
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    def test_lesson_model_creation(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —É—Ä–æ–∫–∞...")
        lesson = MockLesson()
        self.assertIsNotNone(lesson)
        self.assertEqual(lesson.title, "–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫")
        self.assertEqual(lesson.id, 1)
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    async def test_get_lesson_success(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞ –ø–æ ID...")
        result = await self.lesson.get_lesson(self.test_lesson_id)
        self.assertIsNotNone(result)
        self.assertEqual(result.id, self.test_lesson_id)
        self.assertEqual(result.title, "–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫")
        print("‚úÖ –£—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    async def test_get_lesson_not_found(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞...")
        result = await self.lesson.get_lesson(999)
        self.assertIsNone(result)
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_update_lesson_success(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞...")
        update_data = {
            'title': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫',
            'price_usd': Decimal("30.00"),
            'is_active': False
        }
        await self.lesson.update_lesson(self.test_lesson_id, **update_data)
        self.assertEqual(self.lesson.title, '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫')
        self.assertEqual(self.lesson.price_usd, Decimal("30.00"))
        self.assertEqual(self.lesson.is_active, False)
        print("‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    async def test_delete_lesson_soft_delete(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞...")
        self.assertTrue(self.lesson.is_active)
        await self.lesson.delete_lesson(self.test_lesson_id)
        self.assertFalse(self.lesson.is_active)
        print("‚úÖ –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_lesson_data_validation(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞...")
        self.assertIsInstance(self.lesson.title, str)
        self.assertIsInstance(self.lesson.description, str)
        self.assertIsInstance(self.lesson.price_usd, Decimal)
        self.assertIsInstance(self.lesson.is_active, bool)
        self.assertIsInstance(self.lesson.is_free, bool)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

    async def test_toggle_lesson_active_handler(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        mock_call = MockCallbackQuery(f"toggle_active:{self.test_lesson_id}")
        mock_state = MockFSMContext()
        original_status = self.lesson.is_active
        self.lesson.is_active = not self.lesson.is_active
        self.assertNotEqual(self.lesson.is_active, original_status)
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_toggle_lesson_free_handler(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏...")
        mock_call = MockCallbackQuery(f"toggle_free:{self.test_lesson_id}")
        mock_state = MockFSMContext()
        original_free_status = self.lesson.is_free
        self.lesson.is_free = not self.lesson.is_free
        if self.lesson.is_free:
            self.lesson.price_usd = Decimal("0.00")
        self.assertNotEqual(self.lesson.is_free, original_free_status)
        if self.lesson.is_free:
            self.assertEqual(self.lesson.price_usd, Decimal("0.00"))
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_increment_views(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...")
        initial_views = getattr(self.lesson, 'views_count', 0)
        await self.lesson.increment_views(self.test_lesson_id)
        self.assertEqual(self.lesson.views_count, initial_views + 1)
        print("‚úÖ –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    async def test_increment_purchases(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫...")
        initial_purchases = getattr(self.lesson, 'purchases_count', 0)
        await self.lesson.increment_purchases(self.test_lesson_id)
        self.assertEqual(self.lesson.purchases_count, initial_purchases + 1)
        print("‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    def test_lesson_business_logic(self):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —É—Ä–æ–∫–∞...")
        if not self.lesson.is_free:
            self.assertGreater(self.lesson.price_usd, 0)
        print("‚úÖ –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —É—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_async_test(test_func):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(test_func())
    finally:
        loop.close()


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π suite
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_tests = [
        'test_lesson_model_creation',
        'test_lesson_data_validation',
        'test_lesson_business_logic'
    ]
    
    for test_name in sync_tests:
        suite.addTest(TestLessonEdit(test_name))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_tests = [
        'test_get_lesson_success',
        'test_get_lesson_not_found', 
        'test_update_lesson_success',
        'test_delete_lesson_soft_delete',
        'test_toggle_lesson_active_handler',
        'test_toggle_lesson_free_handler',
        'test_increment_views',
        'test_increment_purchases'
    ]
    
    print("\n" + "=" * 60)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 60)
    
    test_instance = TestLessonEdit()
    test_instance.setUp()
    
    async_success = 0
    async_total = len(async_tests)
    
    for test_name in async_tests:
        try:
            print(f"\nüß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
            test_method = getattr(test_instance, test_name)
            run_async_test(test_method)
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            async_success += 1
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    sync_passed = result.testsRun - len(result.failures) - len(result.errors)
    total_passed = sync_passed + async_success
    total_tests = result.testsRun + async_total
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if total_passed == total_tests:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
    print("=" * 60)