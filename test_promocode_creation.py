#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.lesson import Promocode
import asyncio
from decimal import Decimal

async def test_promocode_creation():
    """Test promocode creation and display"""
    
    promo = Promocode()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ 30%
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞...")
    try:
        await promo.create_promocode(
            code="TEST30",
            discount_type="percentage", 
            discount_value=Decimal("0.30"),  # 30% –∫–∞–∫ –¥–æ–ª—è
            usage_limit=5
        )
        print("‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ TEST30 —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ $10
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞...")
    try:
        await promo.create_promocode(
            code="SAVE10",
            discount_type="fixed",
            discount_value=Decimal("10.00"),  # $10 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞
            usage_limit=None  # –±–µ–∑ –ª–∏–º–∏—Ç–∞
        )
        print("‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ SAVE10 —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:")
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    promocodes = await promo.get_all_promocodes()
    
    for p in promocodes:
        if not p.get('is_active', False):
            continue
            
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–¥–∫–µ –∏–∑ –±–∞–∑—ã
        discount_type = p.get('discount_type', 'percentage')
        discount_value = p.get('discount_value', 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if discount_type == 'percentage':
            # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –¥–æ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            discount_percent = float(discount_value) * 100 if float(discount_value) <= 1 else float(discount_value)
            discount_text = f"{int(discount_percent)}%" if discount_percent.is_integer() else f"{discount_percent:.1f}%"
        else:  # fixed
            # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
            discount_amount = float(discount_value)
            discount_text = f"${int(discount_amount)}" if discount_amount.is_integer() else f"${discount_amount:.2f}"
        
        usage_count = p.get('used_count', 0)
        usage_limit = p.get('usage_limit')
        usage_text = f"{usage_count}/{usage_limit if usage_limit else '‚àû'}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        expires_at = p.get('expires_at')
        if expires_at:
            from datetime import datetime
            if isinstance(expires_at, str):
                expires_at = datetime.fromisoformat(expires_at)
            expires_text = f"–¥–æ {expires_at.strftime('%d.%m.%Y')}"
        else:
            expires_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
        
        print(f"üé´ {p.get('code', 'N/A')}")
        print(f"   üí∞ –°–∫–∏–¥–∫–∞: {discount_text}")
        print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_text}")
        print(f"   ‚è∞ –°—Ä–æ–∫: {expires_text}")
        print()
    
    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_promocode_creation())