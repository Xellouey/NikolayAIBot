#!/usr/bin/env python
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
"""
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É  
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_media_info_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏–∞
    message_info_photo = {
        "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ",
        "media": "AgACAgIAAxkBAAIBvGdb_test_photo_id",
        "media_type": "photo"
    }
    
    message_info_video = {
        "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ",
        "media": "BAACAgIAAxkBAAIBvGdb_test_video_id",
        "media_type": "video"
    }
    
    message_info_text_only = {
        "text": "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "media": None,
        "media_type": None
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON
    json_photo = json.dumps(message_info_photo)
    json_video = json.dumps(message_info_video)
    json_text = json.dumps(message_info_text_only)
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ç–æ:")
    print(f"   {json_photo}")
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∏–¥–µ–æ:")
    print(f"   {json_video}")
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç:")
    print(f"   {json_text}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    restored_photo = json.loads(json_photo)
    assert restored_photo["media_type"] == "photo"
    assert "media" in restored_photo
    
    restored_video = json.loads(json_video)
    assert restored_video["media_type"] == "video"
    assert "media" in restored_video
    
    print("\n‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_media_flow():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""
    
    print("\nüìù –≠—Ç–∞–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –º–µ–¥–∏–∞:")
    print("1. –í—ã–±–æ—Ä –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫")
    print("2. üì∑ –ù–û–í–´–ô –≠–¢–ê–ü: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫")
    print("3. –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    print("5. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –º–µ–¥–∏–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    print("6. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    print("\n‚úÖ –ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞")
    return True


def test_backward_compatibility():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
    old_format = "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    new_format = {
        "text": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞",
        "media": "file_id_here",
        "media_type": "photo"
    }
    
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    print(f"   –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç—Ä–æ–∫–∞): {type(old_format).__name__}")
    print(f"   –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (dict): {type(new_format).__name__}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    def process_message_info(message_info):
        if isinstance(message_info, str):
            return {"text": message_info, "media": None, "media_type": None}
        elif isinstance(message_info, dict):
            return message_info
        else:
            return {"text": "", "media": None, "media_type": None}
    
    processed_old = process_message_info(old_format)
    processed_new = process_message_info(new_format)
    
    assert processed_old["text"] == old_format
    assert processed_old["media"] is None
    
    assert processed_new["text"] == "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞"
    assert processed_new["media"] == "file_id_here"
    
    print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    return True


def main():
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò –° –ú–ï–î–ò–ê")
    print("=" * 60)
    
    tests = [
        ("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞", test_media_info_format),
        ("–ü–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã", test_media_flow),
        ("–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_backward_compatibility)
    ]
    
    passed = 0
    failed = 0
    
    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
                failed += 1
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{name}': {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ")
        print("  ‚Ä¢ –¢–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ caption")
        print("  ‚Ä¢ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –º–µ–¥–∏–∞")
        print("  ‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    return failed == 0


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
