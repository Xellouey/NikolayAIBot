#!/usr/bin/env python
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from localization import get_text
from database.mail import Mail

def test_localization():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–µ–∫—Å—Ç"""
    print("=" * 50)
    print("–¢–ï–°–¢ –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    tests = [
        ('mail.messages.mail_help', '–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ JSON'),
        ('mail.buttons.copy_json', '–∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è JSON'),
        ('mail.buttons.copy_inline', '–∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è inline'),
        ('mail.buttons.copy_keyboard', '–∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è keyboard'),
        ('mail.messages.json_example_inline', '–ø—Ä–∏–º–µ—Ä inline JSON'),
        ('mail.messages.json_example_keyboard', '–ø—Ä–∏–º–µ—Ä keyboard JSON'),
    ]
    
    passed = 0
    failed = 0
    
    for key, description in tests:
        text = get_text(key, 'ru')
        if text == key:
            print(f"‚ùå FAIL: {key} - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞")
            failed += 1
        else:
            print(f"‚úÖ PASS: {key} - {description}")
            print(f"   –¢–µ–∫—Å—Ç: {text[:50]}..." if len(text) > 50 else f"   –¢–µ–∫—Å—Ç: {text}")
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    return failed == 0

async def test_mail_scheduler_atomic():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞—Ö–≤–∞—Ç–∞ –∑–∞–¥–∞—á"""
    print("\n" + "=" * 50)
    print("–¢–ï–°–¢ –ê–¢–û–ú–ê–†–ù–û–°–¢–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
    print("=" * 50)
    
    m = Mail()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ø—Ä–æ—à–ª–æ–º (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
    test_date = datetime.now() - timedelta(minutes=1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        mail_id = await m.create_mail(
            date_mail=test_date,
            message_id=999999,  # —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID
            from_id=123456789,  # —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            keyboard=None,
            message_text="Test mail"
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ID: {mail_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        mail = await m.get_mail(mail_id)
        if mail and mail.get('status') == 'wait':
            print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ 'wait'")
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {mail.get('status') if mail else 'None'}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç –∑–∞–¥–∞—á–∏
        await m.update_mail(mail_id, 'status', 'run')
        mail = await m.get_mail(mail_id)
        if mail and mail.get('status') == 'run':
            print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å 'run')")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å: {mail.get('status') if mail else 'None'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö
        wait_mails = await m.get_wait_mails()
        if wait_mails:
            mail_ids = [mail['id'] for mail in wait_mails]
            if mail_id not in mail_ids:
                print(f"‚úÖ –ó–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö")
            else:
                print(f"‚ùå –ó–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö!")
        else:
            print(f"‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ (–∑–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è –Ω–µ –≤ —Å–ø–∏—Å–∫–µ)")
        
        # –û—á–∏—Å—Ç–∫–∞
        await m.delete_mail(mail_id)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def test_check_py_disabled():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ check.py –æ—Ç–∫–ª—é—á–µ–Ω"""
    print("\n" + "=" * 50)
    print("–¢–ï–°–¢ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø CHECK.PY")
    print("=" * 50)
    
    import subprocess
    
    try:
        result = subprocess.run(
            [sys.executable, "check.py"],
            capture_output=True,
            text=True,
            timeout=2
        )
        
        if "check.py disabled" in result.stderr or "check.py disabled" in result.stdout:
            print("‚úÖ check.py –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        else:
            print(f"‚ùå check.py –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω!")
            print(f"   stdout: {result.stdout}")
            print(f"   stderr: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå check.py –∑–∞–≤–∏—Å (–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!)")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å check.py: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

async def main():
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –†–ê–°–°–´–õ–ö–ò\n")
    
    results = []
    
    # –¢–µ—Å—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    results.append(test_localization())
    
    # –¢–µ—Å—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
    results.append(await test_mail_scheduler_atomic())
    
    # –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è check.py
    results.append(await test_check_py_disabled())
    
    print("\n" + "=" * 50)
    print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 50)
    
    if all(results):
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ {results.count(False)} –∏–∑ {len(results)} —Ç–µ—Å—Ç–æ–≤")
        
    return all(results)

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
