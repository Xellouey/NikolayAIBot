"""
üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤ NikolayAI Bot
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–∞–ª–æ–≥–∞
"""

import unittest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from decimal import Decimal
from datetime import datetime


class IntegrationTestCatalogSystem(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.mock_database_lessons = [
            {
                'id': 1,
                'title': '–û—Å–Ω–æ–≤—ã Python',
                'description': '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python',
                'price_usd': Decimal('29.99'),
                'is_free': False,
                'is_active': True,
                'category': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'views_count': 150,
                'purchases_count': 45
            },
            {
                'id': 2,
                'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å HTML',
                'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ HTML',
                'price_usd': Decimal('0.00'),
                'is_free': True,
                'is_active': True,
                'category': '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                'views_count': 500,
                'purchases_count': 200
            },
            {
                'id': 3,
                'title': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π JavaScript',
                'description': '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ JavaScript',
                'price_usd': Decimal('49.99'),
                'is_free': False,
                'is_active': True,
                'category': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'views_count': 75,
                'purchases_count': 20
            },
            {
                'id': 4,
                'title': '–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—É—Ä—Å',
                'description': '–≠—Ç–æ—Ç –∫—É—Ä—Å –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
                'price_usd': Decimal('19.99'),
                'is_free': False,
                'is_active': False,
                'category': '–ê—Ä—Ö–∏–≤',
                'views_count': 25,
                'purchases_count': 5
            }
        ]
        
        self.mock_user_purchases = {
            123456789: [  # –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                {'lesson_id': 1, 'title': '–û—Å–Ω–æ–≤—ã Python', 'price_paid_usd': Decimal('29.99')},
                {'lesson_id': 2, 'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å HTML', 'price_paid_usd': Decimal('0.00')}
            ],
            987654321: [],  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
            555555555: [   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π
                {'lesson_id': 2, 'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å HTML', 'price_paid_usd': Decimal('0.00')}
            ]
        }
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    async def test_full_catalog_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
        active_lessons = [lesson for lesson in self.mock_database_lessons if lesson['is_active']]
        self.assertEqual(len(active_lessons), 3)
        print("  ‚úÖ –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
        
        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        programming_lessons = [lesson for lesson in active_lessons if lesson['category'] == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']
        self.assertEqual(len(programming_lessons), 2)
        print("  ‚úÖ –®–∞–≥ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        # 3. –†–∞—Å—á–µ—Ç —Ü–µ–Ω –≤ –∑–≤–µ–∑–¥–∞—Ö –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
        for lesson in active_lessons:
            price_usd = float(lesson['price_usd'])
            price_stars = max(1, int(price_usd * 200))  # 200 –∑–≤–µ–∑–¥ –∑–∞ –¥–æ–ª–ª–∞—Ä
            
            if lesson['is_free']:
                self.assertEqual(price_stars, 1)
            else:
                self.assertGreater(price_stars, 1)
        print("  ‚úÖ –®–∞–≥ 3: –†–∞—Å—á–µ—Ç —Ü–µ–Ω –≤ –∑–≤–µ–∑–¥–∞—Ö")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤
        total_views = sum(lesson['views_count'] for lesson in active_lessons)
        total_purchases = sum(lesson['purchases_count'] for lesson in active_lessons)
        
        self.assertGreater(total_views, 0)
        self.assertGreater(total_purchases, 0)
        print("  ‚úÖ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        catalog_data = []
        for lesson in active_lessons:
            catalog_item = {
                'id': lesson['id'],
                'title': lesson['title'],
                'price_display': 'FREE' if lesson['is_free'] else f"${lesson['price_usd']:.2f}",
                'category': lesson['category'],
                'is_popular': lesson['purchases_count'] > 50
            }
            catalog_data.append(catalog_item)
        
        self.assertEqual(len(catalog_data), 3)
        popular_lessons = [item for item in catalog_data if item['is_popular']]
        self.assertEqual(len(popular_lessons), 1)  # HTML –∫—É—Ä—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–π
        print("  ‚úÖ –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞")
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_user_journey_scenarios(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏...")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        new_user_id = 987654321
        user_purchases = self.mock_user_purchases.get(new_user_id, [])
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–∫—É–ø–æ–∫
        self.assertEqual(len(user_purchases), 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥
        available_lessons = [lesson for lesson in self.mock_database_lessons if lesson['is_active']]
        self.assertEqual(len(available_lessons), 3)
        print("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏
        active_user_id = 123456789
        user_purchases = self.mock_user_purchases.get(active_user_id, [])
        
        # –£ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
        self.assertEqual(len(user_purchases), 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏
        owned_lesson_ids = [purchase['lesson_id'] for purchase in user_purchases]
        self.assertIn(1, owned_lesson_ids)  # –í–ª–∞–¥–µ–µ—Ç —É—Ä–æ–∫–æ–º Python
        self.assertIn(2, owned_lesson_ids)  # –í–ª–∞–¥–µ–µ—Ç HTML –∫—É—Ä—Å–æ–º
        self.assertNotIn(3, owned_lesson_ids)  # –ù–µ –≤–ª–∞–¥–µ–µ—Ç JavaScript
        print("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
        free_user_id = 555555555
        user_purchases = self.mock_user_purchases.get(free_user_id, [])
        
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
        self.assertEqual(len(user_purchases), 1)
        self.assertEqual(user_purchases[0]['price_paid_usd'], Decimal('0.00'))
        print("  ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏")
        
        print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_catalog_filtering_and_sorting(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        active_lessons = [lesson for lesson in self.mock_database_lessons if lesson['is_active']]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏
        free_lessons = [lesson for lesson in active_lessons if lesson['is_free']]
        paid_lessons = [lesson for lesson in active_lessons if not lesson['is_free']]
        
        self.assertEqual(len(free_lessons), 1)
        self.assertEqual(len(paid_lessons), 2)
        print("  ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫)
        sorted_by_popularity = sorted(active_lessons, key=lambda x: x['purchases_count'], reverse=True)
        most_popular = sorted_by_popularity[0]
        self.assertEqual(most_popular['title'], '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å HTML')
        self.assertEqual(most_popular['purchases_count'], 200)
        print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
        sorted_by_price = sorted(active_lessons, key=lambda x: x['price_usd'])
        cheapest = sorted_by_price[0]
        most_expensive = sorted_by_price[-1]
        
        self.assertEqual(cheapest['price_usd'], Decimal('0.00'))
        self.assertEqual(most_expensive['price_usd'], Decimal('49.99'))
        print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for lesson in active_lessons:
            category = lesson['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(lesson)
        
        self.assertIn('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', categories)
        self.assertIn('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', categories)
        self.assertEqual(len(categories['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']), 2)
        self.assertEqual(len(categories['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']), 1)
        print("  ‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_purchase_flow_simulation(self):
        """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏...")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–∫
        user_id = 987654321  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        lesson_id = 3  # JavaScript –∫—É—Ä—Å –∑–∞ $49.99
        
        # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫
        lesson = next((l for l in self.mock_database_lessons if l['id'] == lesson_id), None)
        self.assertIsNotNone(lesson)
        self.assertEqual(lesson['title'], '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π JavaScript')
        print("  ‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–ª–∞–¥–µ–µ—Ç —É—Ä–æ–∫–æ–º
        user_purchases = self.mock_user_purchases.get(user_id, [])
        owned_lesson_ids = [p['lesson_id'] for p in user_purchases]
        self.assertNotIn(lesson_id, owned_lesson_ids)
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–ª–∞–¥–µ–Ω–∏—è")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price_usd = float(lesson['price_usd'])
        price_stars = max(1, int(price_usd * 200))
        
        self.assertEqual(price_usd, 49.99)
        self.assertEqual(price_stars, 9998)  # 49.99 * 200 = 9998
        print("  ‚úÖ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
        new_purchase = {
            'lesson_id': lesson_id,
            'title': lesson['title'],
            'price_paid_usd': lesson['price_usd'],
            'price_paid_stars': price_stars,
            'purchase_date': datetime.now()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id not in self.mock_user_purchases:
            self.mock_user_purchases[user_id] = []
        self.mock_user_purchases[user_id].append(new_purchase)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        updated_purchases = self.mock_user_purchases[user_id]
        self.assertEqual(len(updated_purchases), 1)
        self.assertEqual(updated_purchases[0]['lesson_id'], lesson_id)
        print("  ‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–∫–∞
        lesson['purchases_count'] += 1
        self.assertEqual(lesson['purchases_count'], 21)
        print("  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–∞")
        
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    async def test_catalog_performance_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —É—Ä–æ–∫–æ–≤
        for lesson in self.mock_database_lessons:
            if lesson['is_active'] and lesson['views_count'] > 0:
                conversion_rate = (lesson['purchases_count'] / lesson['views_count']) * 100
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 100%)
                self.assertGreaterEqual(conversion_rate, 0)
                self.assertLessEqual(conversion_rate, 100)
                
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é
                if lesson['is_free']:
                    self.assertGreater(conversion_rate, 30)  # –ú–∏–Ω–∏–º—É–º 30% –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
        
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —É—Ä–æ–∫–æ–≤")
        
        # –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
        active_lessons = [lesson for lesson in self.mock_database_lessons if lesson['is_active']]
        total_views = sum(lesson['views_count'] for lesson in active_lessons)
        total_purchases = sum(lesson['purchases_count'] for lesson in active_lessons)
        
        overall_conversion = (total_purchases / total_views) * 100 if total_views > 0 else 0
        
        self.assertGreater(total_views, 0)
        self.assertGreater(total_purchases, 0)
        self.assertGreater(overall_conversion, 0)
        print("  ‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏
        revenue_by_lesson = {}
        total_revenue = Decimal('0.00')
        
        for user_purchases in self.mock_user_purchases.values():
            for purchase in user_purchases:
                lesson_id = purchase['lesson_id']
                price = purchase['price_paid_usd']
                
                if lesson_id not in revenue_by_lesson:
                    revenue_by_lesson[lesson_id] = Decimal('0.00')
                revenue_by_lesson[lesson_id] += price
                total_revenue += price
        
        self.assertGreater(total_revenue, Decimal('0.00'))
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏")
        
        # –¢–æ–ø —É—Ä–æ–∫–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
        revenue_ranking = sorted(revenue_by_lesson.items(), key=lambda x: x[1], reverse=True)
        if revenue_ranking:
            top_lesson_id, top_revenue = revenue_ranking[0]
            self.assertGreater(top_revenue, Decimal('0.00'))
        
        print("  ‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Ä–æ–∫–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ")
        
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_catalog_data_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        for lesson in self.mock_database_lessons:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            self.assertIsNotNone(lesson['id'])
            self.assertIsNotNone(lesson['title'])
            self.assertIsNotNone(lesson['description'])
            self.assertIsInstance(lesson['price_usd'], Decimal)
            self.assertIsInstance(lesson['is_free'], bool)
            self.assertIsInstance(lesson['is_active'], bool)
            
            # –õ–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            if lesson['is_free']:
                self.assertEqual(lesson['price_usd'], Decimal('0.00'))
            else:
                self.assertGreater(lesson['price_usd'], Decimal('0.00'))
            
            # –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
            self.assertGreaterEqual(lesson['views_count'], 0)
            self.assertGreaterEqual(lesson['purchases_count'], 0)
            
            # –ü–æ–∫—É–ø–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            self.assertLessEqual(lesson['purchases_count'], lesson['views_count'])
        
        print("  ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–æ–∫
        for user_id, purchases in self.mock_user_purchases.items():
            self.assertIsInstance(user_id, int)
            self.assertIsInstance(purchases, list)
            
            for purchase in purchases:
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–∫—É–ø–∫–∏
                self.assertIn('lesson_id', purchase)
                self.assertIn('title', purchase)
                self.assertIn('price_paid_usd', purchase)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                lesson_exists = any(l['id'] == purchase['lesson_id'] for l in self.mock_database_lessons)
                self.assertTrue(lesson_exists)
                
                # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
                self.assertGreaterEqual(purchase['price_paid_usd'], Decimal('0.00'))
        
        print("  ‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID —É—Ä–æ–∫–æ–≤
        lesson_ids = [lesson['id'] for lesson in self.mock_database_lessons]
        unique_ids = set(lesson_ids)
        self.assertEqual(len(lesson_ids), len(unique_ids))
        print("  ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID —É—Ä–æ–∫–æ–≤")
        
        print("‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")


def run_async_test(test_func):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(test_func())
    finally:
        loop.close()


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π suite
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_tests = [
        'test_catalog_data_consistency'
    ]
    
    for test_name in sync_tests:
        suite.addTest(IntegrationTestCatalogSystem(test_name))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_tests = [
        'test_full_catalog_workflow',
        'test_user_journey_scenarios',
        'test_catalog_filtering_and_sorting',
        'test_purchase_flow_simulation',
        'test_catalog_performance_metrics'
    ]
    
    print("\n" + "=" * 60)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 60)
    
    test_instance = IntegrationTestCatalogSystem()
    test_instance.setUp()
    
    async_success = 0
    async_total = len(async_tests)
    
    for test_name in async_tests:
        try:
            print(f"\nüß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
            test_method = getattr(test_instance, test_name)
            run_async_test(test_method)
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            async_success += 1
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    sync_passed = result.testsRun - len(result.failures) - len(result.errors)
    total_passed = sync_passed + async_success
    total_tests = result.testsRun + async_total
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if total_passed == total_tests:
        print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
    print("=" * 60)