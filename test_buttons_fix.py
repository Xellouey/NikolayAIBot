"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞, –º–æ–∏—Ö —É—Ä–æ–∫–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª—è
"""

import asyncio
import sys
from unittest.mock import Mock, AsyncMock, patch
from aiogram import types
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.append('.')

def create_mock_callback_query(data: str, user_id: int = 123456789):
    """–°–æ–∑–¥–∞—Ç—å mock –æ–±—ä–µ–∫—Ç CallbackQuery"""
    call = Mock(spec=types.CallbackQuery)
    call.data = data
    call.answer = AsyncMock()
    
    # Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    call.from_user = Mock()
    call.from_user.id = user_id
    call.from_user.full_name = "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # Mock —Å–æ–æ–±—â–µ–Ω–∏—è
    call.message = Mock()
    call.message.message_id = 123
    call.message.chat = Mock()
    call.message.chat.id = user_id
    
    return call

def create_mock_state():
    """–°–æ–∑–¥–∞—Ç—å mock –æ–±—ä–µ–∫—Ç FSMContext"""
    state = Mock(spec=FSMContext)
    state.get_data = AsyncMock(return_value={})
    state.clear = AsyncMock()
    return state

async def test_error_decorator_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ handle_errors"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ...")
    
    try:
        from errors import handle_errors
        import keyboards as kb
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        @handle_errors(main_menu_markup=kb.markup_main_menu(), redirect_on_error=True)
        async def test_handler(call: types.CallbackQuery, state: FSMContext):
            return "success"
        
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
        call = create_mock_callback_query("test")
        state = create_mock_state()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ middleware –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        middleware_args = {
            'dispatcher': Mock(),
            'bot': Mock(),
            'bots': Mock(),
            'fsm_storage': Mock(),
            'event_context': Mock(),
            'event_from_user': Mock(),
            'event_chat': Mock(),
            'raw_updates': Mock(),
            'handler': Mock()  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å middleware –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        result = await test_handler(call, state, **middleware_args)
        
        if result == "success":
            print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è middleware –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è middleware –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_catalog_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ show_catalog...")
    
    try:
        # –ü–∞—Ç—á–∏–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('handlers.shop.safe_state_manager') as mock_state_manager, \
             patch('handlers.shop.resilient_db_operation') as mock_db_op, \
             patch('handlers.shop.global_message_manager') as mock_msg_manager, \
             patch('handlers.shop.l') as mock_lesson, \
             patch('handlers.shop.utils') as mock_utils, \
             patch('handlers.shop.kb') as mock_kb:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_state_manager.safe_clear_state = AsyncMock()
            mock_msg_manager.edit_message_safe = AsyncMock()
            mock_utils.get_text = Mock(return_value="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤")
            mock_kb.markup_catalog = Mock(return_value=Mock())
            mock_kb.markup_main_menu = Mock(return_value=Mock())
            
            # –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤
            mock_lessons = [
                {'id': 1, 'title': '–£—Ä–æ–∫ 1', 'price_usd': 25.0, 'is_free': False},
                {'id': 2, 'title': '–£—Ä–æ–∫ 2', 'price_usd': 0.0, 'is_free': True}
            ]
            
            def mock_decorator(operation_name=None, use_cache=False, cache_key=None):
                def decorator(func):
                    async def wrapper():
                        return mock_lessons
                    return wrapper
                return decorator
            
            mock_db_op.side_effect = mock_decorator
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            from handlers.shop import show_catalog
            
            call = create_mock_callback_query("catalog")
            state = create_mock_state()
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await show_catalog(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            call.answer.assert_called_once()
            mock_state_manager.safe_clear_state.assert_called_once()
            mock_msg_manager.edit_message_safe.assert_called_once()
            
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è show_catalog —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ show_catalog: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_my_lessons_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –º–æ–∏—Ö —É—Ä–æ–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ show_my_lessons...")
    
    try:
        with patch('handlers.shop.safe_state_manager') as mock_state_manager, \
             patch('handlers.shop.resilient_db_operation') as mock_db_op, \
             patch('handlers.shop.global_message_manager') as mock_msg_manager, \
             patch('handlers.shop.p') as mock_purchase, \
             patch('handlers.shop.utils') as mock_utils, \
             patch('handlers.shop.kb') as mock_kb:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_state_manager.safe_clear_state = AsyncMock()
            mock_msg_manager.edit_message_safe = AsyncMock()
            mock_utils.get_text = Mock(return_value="üìö –í–∞—à–∏ —É—Ä–æ–∫–∏")
            mock_kb.markup_my_lessons = Mock(return_value=Mock())
            mock_kb.markup_main_menu = Mock(return_value=Mock())
            
            # –ú–æ–∫–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mock_purchases = [
                {'lesson_id': 1, 'title': '–ö—É–ø–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫ 1'},
                {'lesson_id': 2, 'title': '–ö—É–ø–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫ 2'}
            ]
            
            def mock_decorator(operation_name=None, use_cache=False, cache_key=None):
                def decorator(func):
                    async def wrapper():
                        return mock_purchases
                    return wrapper
                return decorator
            
            mock_db_op.side_effect = mock_decorator
            
            from handlers.shop import show_my_lessons
            
            call = create_mock_callback_query("my_lessons")
            state = create_mock_state()
            
            await show_my_lessons(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            call.answer.assert_called_once()
            mock_state_manager.safe_clear_state.assert_called_once()
            mock_msg_manager.edit_message_safe.assert_called_once()
            
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è show_my_lessons —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ show_my_lessons: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_profile_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ show_profile...")
    
    try:
        with patch('handlers.shop.safe_state_manager') as mock_state_manager, \
             patch('handlers.shop.resilient_db_operation') as mock_db_op, \
             patch('handlers.shop.global_message_manager') as mock_msg_manager, \
             patch('handlers.shop.p') as mock_purchase, \
             patch('handlers.shop.utils') as mock_utils, \
             patch('handlers.shop.kb') as mock_kb:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_state_manager.safe_clear_state = AsyncMock()
            mock_msg_manager.edit_message_safe = AsyncMock()
            mock_utils.get_text = Mock(return_value="üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
            mock_kb.markup_main_menu = Mock(return_value=Mock())
            
            # –ú–æ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            def mock_decorator(operation_name=None, use_cache=False, cache_key=None):
                def decorator(func):
                    async def wrapper():
                        return 3  # 3 —É—Ä–æ–∫–∞
                    return wrapper
                return decorator
            
            mock_db_op.side_effect = mock_decorator
            
            from handlers.shop import show_profile
            
            call = create_mock_callback_query("profile")
            state = create_mock_state()
            
            await show_profile(call, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            call.answer.assert_called_once()
            mock_state_manager.safe_clear_state.assert_called_once()
            mock_msg_manager.edit_message_safe.assert_called_once()
            
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è show_profile —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ show_profile: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_keyboard_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        import keyboards as kb
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = kb.markup_main_menu()
        if main_menu and hasattr(main_menu, 'inline_keyboard'):
            print("‚úÖ markup_main_menu() —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå markup_main_menu() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
        mock_lessons = [
            {'id': 1, 'title': '–£—Ä–æ–∫ 1', 'price_usd': 25.0, 'is_free': False}
        ]
        catalog_keyboard = kb.markup_catalog(mock_lessons)
        if catalog_keyboard and hasattr(catalog_keyboard, 'inline_keyboard'):
            print("‚úÖ markup_catalog() —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå markup_catalog() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç –º–æ–∏—Ö —É—Ä–æ–∫–æ–≤
        mock_my_lessons = [
            {'id': 1, 'title': '–ú–æ–π —É—Ä–æ–∫ 1'}
        ]
        my_lessons_keyboard = kb.markup_my_lessons(mock_my_lessons)
        if my_lessons_keyboard and hasattr(my_lessons_keyboard, 'inline_keyboard'):
            print("‚úÖ markup_my_lessons() —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå markup_my_lessons() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫...")
    print("=" * 60)
    
    tests = [
        test_error_decorator_filtering,
        test_keyboard_functions,
        test_catalog_function,
        test_my_lessons_function,
        test_profile_function
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if await test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            print()
    
    print("=" * 60)
    print(f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è middleware –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ fsm_storage –∏ –¥—Ä—É–≥–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫")
        print("\nüéØ –ö–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("‚Ä¢ üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–∫–æ–≤")
        print("‚Ä¢ üìö –ú–æ–∏ —É—Ä–æ–∫–∏")
        print("‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        print("‚Ä¢ üîô –ù–∞–∑–∞–¥")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == '__main__':
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)