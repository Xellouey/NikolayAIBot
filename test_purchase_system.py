"""
–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–∫–æ–≤
"""
import asyncio
from unittest.mock import Mock, AsyncMock, patch

async def test_buy_lesson_free():
    """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞...")
    
    with patch('handlers.shop.l') as mock_lesson, \
         patch('handlers.shop.p') as mock_purchase, \
         patch('handlers.shop.global_message_manager') as mock_msg:
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∫–æ–≤
        mock_lesson.get_lesson = AsyncMock(return_value=Mock(
            id=1, title="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫", is_free=True, price_usd=0.0
        ))
        mock_purchase.check_user_has_lesson = AsyncMock(return_value=False)
        mock_purchase.create_purchase = AsyncMock()
        mock_lesson.increment_purchases = AsyncMock()
        mock_msg.edit_message_safe = AsyncMock()
        
        from handlers.shop import buy_lesson
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ call
        call = Mock()
        call.data = "buy:1"
        call.answer = AsyncMock()
        call.from_user.id = 123
        call.message = Mock()
        
        state = Mock()
        
        await buy_lesson(call, state)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_purchase.create_purchase.assert_called_once()
        print("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω")
        return True

async def test_buy_lesson_paid():
    """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""  
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞...")
    
    with patch('handlers.shop.l') as mock_lesson, \
         patch('handlers.shop.p') as mock_purchase, \
         patch('handlers.shop.global_message_manager') as mock_msg:
        
        mock_lesson.get_lesson = AsyncMock(return_value=Mock(
            id=2, title="–ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫", is_free=False, price_usd=25.0
        ))
        mock_purchase.check_user_has_lesson = AsyncMock(return_value=False)
        mock_msg.edit_message_safe = AsyncMock()
        
        from handlers.shop import buy_lesson
        
        call = Mock()
        call.data = "buy:2"
        call.answer = AsyncMock()
        call.from_user.id = 123
        call.message = Mock()
        
        state = Mock()
        
        await buy_lesson(call, state)
        
        # –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
        mock_msg.edit_message_safe.assert_called_once()
        print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã")
        return True

async def run_purchase_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–æ–∫...")
    print("=" * 50)
    
    tests = [test_buy_lesson_free, test_buy_lesson_paid]
    passed = 0
    
    for test in tests:
        try:
            if await test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print("=" * 50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫—É–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫—É–ø–æ–∫")
        return False

if __name__ == '__main__':
    import sys
    sys.path.append('.')
    success = asyncio.run(run_purchase_tests())