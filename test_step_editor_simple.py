"""
Simplified test to demonstrate step editor functionality and identify the /start issue.
This test can run without full database setup.
"""

import json
import tempfile
import shutil
import os
from unittest.mock import AsyncMock, MagicMock, patch

# Import utility functions
import utils


def test_step_editor_functionality():
    """Test step editor core functionality without external dependencies"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–≥–æ–≤...")
    
    # Test 1: Step file operations
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–æ–º —à–∞–≥–æ–≤:")
    
    # Create temporary test file
    test_dir = tempfile.mkdtemp()
    test_file = os.path.join(test_dir, "test_steps.json")
    
    test_steps = {
        "join": {
            "content_type": "text",
            "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            "caption": None,
            "file_id": None,
            "keyboard": None,
            "delay": 0
        },
        "start": {
            "content_type": "text",
            "text": "–ù–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ!",
            "caption": None,
            "file_id": None,
            "keyboard": None,
            "delay": 0
        },
        "step1": {
            "content_type": "text",
            "text": "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫",
            "caption": None,
            "file_id": None,
            "keyboard": None,
            "delay": 5
        }
    }
    
    # Test writing steps
    utils.update_steps(test_steps, test_file)
    print("‚úÖ –ó–∞–ø–∏—Å—å —à–∞–≥–æ–≤ –≤ —Ñ–∞–π–ª: –£–°–ü–ï–•")
    
    # Test reading steps
    loaded_steps = utils.get_steps(test_file)
    assert loaded_steps == test_steps
    print("‚úÖ –ß—Ç–µ–Ω–∏–µ —à–∞–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: –£–°–ü–ï–•")
    
    # Test 2: Dictionary manipulation
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º:")
    
    # Test moving items
    moved_dict = utils.move_dict_item(test_steps, "step1", 1)
    keys_list = list(moved_dict.keys())
    assert keys_list[1] == "step1"  # step1 should be at position 1
    print("‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ–≤–∞—Ä—è: –£–°–ü–ï–•")
    
    # Test removing items
    removed_dict = utils.remove_dict_item(test_steps, "step1")
    assert "step1" not in removed_dict
    assert len(removed_dict) == 2
    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ–≤–∞—Ä—è: –£–°–ü–ï–•")
    
    # Test 3: New key generation
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π:")
    
    with patch('utils.get_steps') as mock_get_steps:
        mock_get_steps.return_value = test_steps
        new_key = utils.get_new_key()
        assert new_key == "step2"
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞: –£–°–ü–ï–•")
    
    # Test 4: Error handling
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")
    
    # Test missing file
    missing_steps = utils.get_steps("nonexistent.json")
    assert missing_steps == {}
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: –£–°–ü–ï–•")
    
    # Test malformed JSON
    bad_json_file = os.path.join(test_dir, "bad.json")
    with open(bad_json_file, 'w') as f:
        f.write('{"invalid": json content')
    
    bad_steps = utils.get_steps(bad_json_file)
    assert bad_steps == {}
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON: –£–°–ü–ï–•")
    
    # Cleanup
    shutil.rmtree(test_dir)
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–≥–æ–≤ –ü–†–û–ô–î–ï–ù–´!")


def analyze_start_command_issue():
    """Analyze the /start command routing issue"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π /start...")
    
    # Read the main bot file to analyze router order
    try:
        with open("nikolayai.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Find router inclusion lines
        lines = content.split('\n')
        router_lines = [line.strip() for line in lines if 'include_router' in line]
        
        print("\nüìã –ü–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤:")
        for i, line in enumerate(router_lines, 1):
            print(f"   {i}. {line}")
        
        # Check if shop router comes before client router
        shop_line = next((line for line in router_lines if 'shop' in line), None)
        client_line = next((line for line in router_lines if 'client' in line), None)
        
        if shop_line and client_line:
            shop_index = router_lines.index(shop_line)
            client_index = router_lines.index(client_line)
            
            if shop_index < client_index:
                print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê:")
                print(f"   Shop router (–ø–æ–∑–∏—Ü–∏—è {shop_index + 1}) –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –†–ê–ù–¨–®–ï client router (–ø–æ–∑–∏—Ü–∏—è {client_index + 1})")
                print(f"   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ shop.start_shop() –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start")
                print(f"   —Ä–∞–Ω—å—à–µ, —á–µ–º client.start() –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
                
                print(f"\nüí° –†–ï–®–ï–ù–ò–ï:")
                print(f"   1. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å dp.include_router(client.router) –í–´–®–ï dp.include_router(shop.shop_router)")
                print(f"   2. –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –≤ shop.start_shop()")
                print(f"   3. –ò–ª–∏ —É–±—Ä–∞—Ç—å CommandStart() –∏–∑ shop.py –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å callback")
            else:
                print(f"\n‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª nikolayai.py –Ω–µ –Ω–∞–π–¥–µ–Ω")


def test_step_content_scenarios():
    """Test various step content scenarios"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–≥–æ–≤:")
    
    # Test scenario 1: Text step
    text_step = {
        "content_type": "text",
        "text": "–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫",
        "caption": None,
        "file_id": None,
        "keyboard": None,
        "delay": 10
    }
    print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–≥: –≤–∞–ª–∏–¥–Ω—ã–π")
    
    # Test scenario 2: Video step with caption
    video_step = {
        "content_type": "video",
        "text": None,
        "caption": "–í–∏–¥–µ–æ —É—Ä–æ–∫ —Å –ø–æ–¥–ø–∏—Å—å—é",
        "file_id": "BAACAgIAAxkBAAM0Z_7juiU1zgUHIdXsePjdP4SgYiwAAu13AAJCGflLwRb5yqTF3go2BA",
        "keyboard": None,
        "delay": 0
    }
    print("‚úÖ –í–∏–¥–µ–æ —à–∞–≥ —Å –ø–æ–¥–ø–∏—Å—å—é: –≤–∞–ª–∏–¥–Ω—ã–π")
    
    # Test scenario 3: Step with keyboard
    keyboard_step = {
        "content_type": "text",
        "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "caption": None,
        "file_id": None,
        "keyboard": [
            {"–ö–Ω–æ–ø–∫–∞ 1": "https://example.com/1"},
            {"–ö–Ω–æ–ø–∫–∞ 2": "https://example.com/2"}
        ],
        "delay": 0
    }
    print("‚úÖ –®–∞–≥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: –≤–∞–ª–∏–¥–Ω—ã–π")
    
    # Test scenario 4: Invalid step (missing required fields)
    invalid_step = {
        "content_type": "text"
        # Missing other required fields
    }
    print("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —à–∞–≥ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
    print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—è–º–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    print("   ‚ö†Ô∏è  –ù—É–∂–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
    print("   ‚ö†Ô∏è  –ù—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")


def simulate_step_editor_workflow():
    """Simulate the step editor workflow"""
    print("\nüé≠ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–≥–æ–≤:")
    
    # Initial steps
    steps = {
        "join": {"content_type": "text", "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "caption": None, "file_id": None, "keyboard": None, "delay": 0},
        "start": {"content_type": "text", "text": "–ù–∞—á–Ω–µ–º!", "caption": None, "file_id": None, "keyboard": None, "delay": 0},
        "step1": {"content_type": "text", "text": "–£—Ä–æ–∫ 1", "caption": None, "file_id": None, "keyboard": None, "delay": 5}
    }
    
    print("1Ô∏è‚É£ –ò—Å—Ö–æ–¥–Ω—ã–µ —à–∞–≥–∏:")
    for key, step in steps.items():
        print(f"   {key}: {step['text']} (–∑–∞–¥–µ—Ä–∂–∫–∞: {step['delay']}—Å)")
    
    # Simulate editing step content
    print("\n2Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ step1:")
    steps["step1"]["text"] = "–£—Ä–æ–∫ 1: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
    steps["step1"]["delay"] = 10
    print(f"   ‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {steps['step1']['text']}")
    print(f"   ‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {steps['step1']['delay']}—Å")
    
    # Simulate adding keyboard
    print("\n3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫ step1:")
    steps["step1"]["keyboard"] = [{"–î–∞–ª–µ–µ": "https://example.com"}]
    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {steps['step1']['keyboard']}")
    
    # Simulate creating new step
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞:")
    new_key = "step2"
    steps[new_key] = {
        "content_type": "video",
        "text": None,
        "caption": "–í–∏–¥–µ–æ —É—Ä–æ–∫ 2",
        "file_id": "new_video_id",
        "keyboard": None,
        "delay": 15
    }
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω {new_key}: {steps[new_key]['caption']}")
    
    # Simulate moving step
    print("\n5Ô∏è‚É£ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ step2 –≤ –ø–æ–∑–∏—Ü–∏—é 1:")
    moved_steps = utils.move_dict_item(steps, "step2", 2)  # Position after start
    keys_order = list(moved_steps.keys())
    print(f"   ‚úÖ –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: {' ‚Üí '.join(keys_order)}")
    
    # Simulate deleting step
    print("\n6Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ step1:")
    final_steps = utils.remove_dict_item(moved_steps, "step1")
    print(f"   ‚úÖ –û—Å—Ç–∞–≤—à–∏–µ—Å—è —à–∞–≥–∏: {list(final_steps.keys())}")
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


def main():
    """Run all tests and analysis"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–≥–æ–≤ NikolayAI")
    print("=" * 60)
    
    try:
        # Test core functionality
        test_step_editor_functionality()
        
        # Analyze the start command issue
        analyze_start_command_issue()
        
        # Test content scenarios
        test_step_content_scenarios()
        
        # Simulate workflow
        simulate_step_editor_workflow()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢:")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–ª–æ–≤–∞—Ä—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚ùå –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start (—Ä–æ—É—Ç–µ—Ä shop –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç)")
        print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
        
        print("\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ nikolayai.py")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ")
        print("3. –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —à–∞–≥–æ–≤")
        print("4. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()